package com.comviva.mfs.controller.test;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.comviva.mfs.MdsApplication;
import com.comviva.mfs.constant.test.CategoryTestConstants;
import com.comviva.mfs.constant.test.TestBaseConstants;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.entity.GradeChecker;
import com.comviva.mfs.entity.GroupRoleMaker;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.GradeCheckerRepository;
import com.comviva.mfs.repository.GroupRoleCheckerRepository;
import com.comviva.mfs.repository.GroupRoleCustomRepository;
import com.comviva.mfs.repository.GroupRoleMakerRepository;
import com.comviva.mfs.repository.SysGroupRoleCheckerRepository;
import com.comviva.mfs.repository.SysGroupRoleMakerRepository;
import com.comviva.mfs.util.GroupRoleDataPreparationUtil;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = MdsApplication.class)
@WebAppConfiguration
public class GroupRoleControllerTest {

    private MockMvc mockMvc;
    @Autowired
    private WebApplicationContext wac;
    @MockBean
    private SysGroupRoleCheckerRepository sysGroupRoleCheckerRepository;
    @MockBean
    private SysGroupRoleMakerRepository sysGroupRoleMakerRepository;
    @MockBean
    private GroupRoleMakerRepository groupRolesMakerRepository;
    @MockBean
    private GroupRoleCheckerRepository groupRoleCheckerRepository;
    @MockBean
    private CategoryCheckerRepository categoryCheckerRepository;
    @MockBean
    private GradeCheckerRepository gradeCheckerRepository;
    @MockBean
    private GroupRoleCustomRepository groupRoleCustomRepository;

    @Before
    public void setup() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
    }

    @Test
    public void testGetGroupRolesByCategoryCodeAndGradeCodeAndWebRoleType() throws Exception {
        when(sysGroupRoleCheckerRepository.loadWebGroupRoles(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRoles());
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByCategoryCodeGradeCodeAndWebRoleUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testGetGroupRolesByCategoryCodeAndGradeCodeAndWalletRoleType() throws Exception {
        when(sysGroupRoleCheckerRepository.loadWalletGroupRoles(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRoles());
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByCategoryCodeGradeCodeAndWalletRoleUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testGetGroupRolesByGroupRoleCode() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.get(GroupRoleDataPreparationUtil.getGroupRolesByRoleCodeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testDeleteGroupRoleInitiate() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testDeleteGroupRoleInitiateApprovalRequired() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleInitialApprovalRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testDeleteGroupRoleApproval() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleApproveUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testUpdateGroupRoleInitiation() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleInitiationeUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.updateGroupRoleInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testUpdateGroupRoleInitiateNoApproval() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleInitiationeUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.updateGroupRoleInitialNoApprovalRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testUpdateGroupRoleApprove() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleApproveUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.updateGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testAaddGroupRoleInitiate() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getGradeChecker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testAddGroupRoleInitiateGroupRoleTypeOne() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getGradeChecker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitiateGroupRoleTypeOneRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testAddGroupRoleInitiateInitiatePaymentTypeBank() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getGradeChecker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitiatePaymentTypeBankRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testAddGroupRoleApproval() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testAddGroupRoleInitiateNoApproval() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getGradeChecker());
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialNoApprovalRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    @Test
    public void testUpdateGroupRoleApprovalActionReject() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleRejectUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.updateGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }

    private CategoryChecker getCategoryChecker() {
        CategoryChecker categoryChecker = new CategoryChecker();
        categoryChecker.setCategoryCode(CategoryTestConstants.CATEGORY_CODE.getValue());
        return categoryChecker;
    }
    
    private GroupRoleMaker getGroupRoleMaker() {
        GroupRoleMaker groupRoleMaker = new GroupRoleMaker();
        groupRoleMaker.setGroupRoleCode(groupRoleCode);
        return groupRoleMaker;
    }

    private GradeChecker getGradeChecker() {
        GradeChecker gradeChecker = new GradeChecker();
        gradeChecker.setCategoryCode(CategoryTestConstants.CATEGORY_CODE.getValue());
        return gradeChecker;
    }

}
