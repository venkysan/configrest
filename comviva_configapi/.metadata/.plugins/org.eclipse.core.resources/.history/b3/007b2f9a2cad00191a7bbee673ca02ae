/** 
 * COPYRIGHT: Comviva Technologies Pvt. Ltd.
 * This software is the sole property of Comviva
 * and is protected by copyright law and international
 * treaty provisions. Unauthorized reproduction or
 * redistribution of this program, or any portion of
 * it may result in severe civil and criminal penalties
 * and will be prosecuted to the maximum extent possible
 * under the law. Comviva reserves all rights not
 * expressly granted. You may not reverse engineer, decompile,
 * or disassemble the software, except and only to the
 * extent that such activity is expressly permitted
 * by applicable law notwithstanding this limitation.
 * THIS SOFTWARE IS PROVIDED TO YOU "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 * YOU ASSUME THE ENTIRE RISK AS TO THE ACCURACY
 * AND THE USE OF THIS SOFTWARE. Comviva SHALL NOT BE LIABLE FOR
 * ANY DAMAGES WHATSOEVER ARISING OUT OF THE USE OF OR INABILITY TO
 * USE THIS SOFTWARE, EVEN IF Comviva HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/
package com.comviva.mfs.service.grade;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.GradeChecker;
import com.comviva.mfs.entity.GradeMaker;
import com.comviva.mfs.model.grade.AddGradeApproveRequest;
import com.comviva.mfs.model.grade.AddGradeApproveResponse;
import com.comviva.mfs.repository.GradeCheckerRepository;
import com.comviva.mfs.repository.GradeMakerRepository;
import com.comviva.mfs.service.CommonService;

/**
 * AddGradeApproveService class is methods to approve the addgrade initiated
 * 
 * @author Venkatesans
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class AddGradeApproveService extends CommonService {

    private String gradeCode;
    private String action;
    private GradeMaker gradeMaker;

    private GradeCheckerRepository gradeCheckerRepository;
    private GradeMakerRepository gradeMakerRepository;
    private AddGradeApproveRequest addGradeApproveRequest;

    @Autowired
    private KafkaTemplate<String, Object> kafkaTemplate;

    /**
     * Construct AddGradeApproveService
     * 
     * @param gradeCheckerRepository
     *            - gradeCheckerRepository
     * @param gradeMakerRepository
     *            - gradeMakerRepository
     */
    @Autowired
    public AddGradeApproveService(GradeCheckerRepository gradeCheckerRepository,
            GradeMakerRepository gradeMakerRepository) {
        this.gradeCheckerRepository = gradeCheckerRepository;
        this.gradeMakerRepository = gradeMakerRepository;
    }

    /**
     * Approve the add grade initiated
     * 
     * @param gradeCode
     *            - String
     * @param action
     *            - String
     * @param addGradeApproveRequest
     *            -addGradeApproveRequest
     * @return AddGradeApproveResponse
     */
    public AddGradeApproveResponse execute(String gradeCode, String action,
            AddGradeApproveRequest addGradeApproveRequest) {
        Map<String, Object> constructAdminMap = new HashMap<>();
        List<String> params = new ArrayList<>();
        this.gradeCode = gradeCode;
        this.action = action;
        this.addGradeApproveRequest = addGradeApproveRequest;
        serviceRoleCode = ServiceRoleCodes.ADD_GRADE_APPR_ROLE.getStrValue();
        super.initiate(addGradeApproveRequest, serviceRoleCode);
        validateInputs();
        GradeChecker gradeChecker = new GradeChecker();
        copyObjects(gradeChecker, gradeMaker);
        if (Constants.ACTION.getStrValue().equals(action)) {
            gradeChecker.setStatus(Constants.ACTIVE_STATUS.getStrValue());
            gradeChecker.setModifiedBy(addGradeApproveRequest.getIdentifierValue());
            params.add(gradeChecker.getGradeCode());
            params.add(gradeChecker.getGradeName());
            gradeChecker = gradeCheckerRepository.save(gradeChecker);
            responseMessageCode = MessageCodes.GRADE_ADD_APPR_SUCCESS.getStrValue();
        } else {
            responseMessageCode = MessageCodes.GRADE_REJECT_SUCCESS.getStrValue();
        }
        gradeMakerRepository.delete(gradeMaker);
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        createRequestResponseHistObject();
        constructAdminMap.put(NEW_OBJECT, gradeMaker);
        createAuditLogMap(constructAdminMap);
        kafkaTemplate.send("gradeChecker", gradeChecker);
        params.add(gradeCode);
        generateReponseMessage(params);
        return createResponse();
    }

    /**
     * Construct the AddGradeApproveResponse
     * 
     * @return AddGradeApproveResponse
     */
    @Override
    public AddGradeApproveResponse createResponse() {
        AddGradeApproveResponse addGradeApproveResponse = new AddGradeApproveResponse();
        addGradeApproveResponse.setStatus(responseStatus);
        addGradeApproveResponse.setExternalRefId(addGradeApproveRequest.getExternalRefId());
        addGradeApproveResponse.setReferenceId(referenceId);
        addGradeApproveResponse.setMessage(responseMessage);
        return addGradeApproveResponse;
    }

    /**
     * Validate the request parameters
     */
    @Override
    public void validateInputs() {
        gradeCodeCheck();
        
       
    }

    private void validateInputs() {
        if (CommonUtils.isNullorEmpty(action)) {
            throw new ValidationException(Constants.ACTION_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        }else if(!CommonUtils.isValidAction(action)) {
                 throw new ValidationException(Constants.ACTION_CODE.getStrValue(),
                         MessageCodes.FIELD_INVALID.getStrValue());
        }
        
        if (CommonUtils.isNullorEmpty(gradeCode)) {
            throw new ValidationException(Constants.GRADE_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isAlphaNumericAndLenghtCheck(gradeCode, gradeCode.length(),
                Constants.GRADE_CODE_LENGTH.getIntValue())) {
            throw new ValidationException(Constants.GRADE_CODE.getStrValue(),
                    MessageCodes.FIELD_ALPHANUMERIC.getStrValue());
        }
        gradeMaker = gradeMakerRepository.getGradeByGradeCode(gradeCode);
        if (gradeMaker == null) {
            throw new ValidationException(Constants.GRADE_CODE.getStrValue(),
                    MessageCodes.GRADE_CODE_NOT_FOUND.getStrValue());
        }
    }

}
