package com.comviva.mfs.controller.test;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.comviva.mfs.common.ErrorCodes;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.constant.test.TestBaseConstants;
import com.comviva.mfs.repository.DomainCheckerRepository;
import com.comviva.mfs.repository.GradeCheckerRepository;
import com.comviva.mfs.repository.GradeMakerRepository;
import com.comviva.mfs.util.GradeDataPreparationUtil;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class GradeControllerTest {

	@LocalServerPort
	private int port;
	@MockBean
	private GradeCheckerRepository gradeCheckerRepository;
	@MockBean
	private GradeMakerRepository gradeMakerRepository;
	@MockBean
	private DomainCheckerRepository domainCheckerRepository;

	private MockMvc mockMvc;
	@Autowired
	private WebApplicationContext wac;

	@Before
	public void setup() {
		this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
	}

	@Test
	public void testAddGradeInitiate() throws Exception {
	    when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
        .thenReturn(GradeDataPreparationUtil.getDomainChecker());
		mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

	}

	@Test
	public void testAddGradeInitiateNoApproval() throws Exception {
		when(gradeMakerRepository.getNextSeriesId()).thenReturn(1l);
		 when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
	        .thenReturn(GradeDataPreparationUtil.getDomainChecker());
		mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.addGradeInitialNoApprovalRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void testAddGradeApproval() throws Exception {
		when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeMaker());
		mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.addGradeApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void testUpdateGradeInitiate() throws Exception {
		when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeChecker());
		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

	}

	@Test
	public void testUpdateGradeInitiateNoApproval() throws Exception {
		when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeChecker());
		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeInitialNoApprovalRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void testUpdateGradeApproval() throws Exception {
		when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeMaker());
		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void testDeleteGradeInitiate() throws Exception {
		when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeChecker());
		mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.deleteGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

	}

	@Test
	public void testDeleteGradeInitiateNoApproval() throws Exception {
		when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeChecker());
		mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.deleteGradeInitialNoApprovalRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void testDeleteGradeApproval() throws Exception {
		when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeMaker());
		when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeChecker());
		mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.deleteGradeApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

	}

	@Test
	public void testGetAllGrade() throws Exception {
		when(gradeCheckerRepository.getAllActiveGrades(Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGrades());
		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getAllGradesUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

	}
	
	@Test
    public void testGetAllGradeYes() throws Exception {
        when(gradeMakerRepository.findAll())
                .thenReturn(GradeDataPreparationUtil.getMakerGrades());
        mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getAllGradesYesUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));

    }
	
	@Test
    public void testGetAllGradeNoRecord() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getAllGradesYesUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(MessageCodes.NO_RECORDS_FOUND.getStrValue()));

    }

	@Test
	public void testGetAllGradeEmptyCase() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getAllGradesUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value((ErrorCodes.NO_ACTIVE_GRADE_FOUND.getErrorCode())));

	}

	@Test
	public void testGetGradeByCodeNo() throws Exception {
		when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeChecker());
		 when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
	        .thenReturn(GradeDataPreparationUtil.getGradeMaker());
		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}
	
	@Test
    public void testGetGradeByCodeYes() throws Exception {
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeChecker());
        when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
        .thenReturn(GradeDataPreparationUtil.getGradeMaker());
        
        mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceInitiateStatusYesUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));
    }
	
	@Test
    public void testGetGradeByCodeNorecord() throws Exception {        
        mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceInitiateStatusYesUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(MessageCodes.NO_RECORDS_FOUND.getStrValue()));
    }

	@Test
	public void testGetGradesByCategoryCode() throws Exception {
		when(gradeCheckerRepository.getGradeByCategoryCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGrades());
		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradesByCategoryCodeUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

	}
	
	@Test
    public void testGetGradesByCategoryCodeNorecord() throws Exception {
	    when(gradeCheckerRepository.getGradeByCategoryCode(Mockito.anyString(), Mockito.anyString())).thenReturn(null);
        mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradesByCategoryCodeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));

    }
}
