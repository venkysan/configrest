package com.comviva.mfs.service.category;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.model.BaseRequest;
import com.comviva.mfs.model.category.GetCategoryByDomainCatCodeResponse;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.service.CommonService;

/**
 * @author sudharshans
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class GetCategoryByDomainCatCodeService extends CommonService {

    private String domainCode;
    private String identifierType;
    private String identifierValue;
    private String bearerCode;
    private List<CategoryChecker> categoryList;
    private CategoryCheckerRepository categoryCheckerRepository;

    /**
     * @param categoryCheckerRepository
     */
    @Autowired
    public GetCategoryByDomainCatCodeService(CategoryCheckerRepository categoryCheckerRepository) {
        this.categoryCheckerRepository = categoryCheckerRepository;
    }

    /**
     * This method used for Get Category By Domain CatCode
     * 
     * @param domainCode
     * @param identifierType
     * @param identifierValue
     * @param bearerCode
     * @return GetCategoryByDomainCatCodeResponse
     */
    public GetCategoryByDomainCatCodeResponse execute(String domainCode, String categoryCode, String identifierType,
            String identifierValue, String bearerCode) {
        List<String> params = new ArrayList<>();
        BaseRequest request = new BaseRequest();
        this.domainCode = domainCode;
        this.identifierType = identifierType;
        this.identifierValue = identifierValue;
        this.bearerCode = bearerCode;
        request.setIdentifierType(identifierType);
        request.setIdentifierValue(identifierValue);
        request.setBearerCode(bearerCode);
        serviceRoleCode = ServiceRoleCodes.VIEW_CATEGORY_ROLE.getStrValue();
        super.initiate(request, serviceRoleCode);
        params.add(domainCode);
        validateInputs();
        categoryList = categoryCheckerRepository.getCategoryByDomainCatCode(domainCode, this.categoryCode,
                Constants.ACTIVE_STATUS.getStrValue());
        if (CommonUtils.isNullorEmpty(categoryList)) {
            responseMessageCode = MessageCodes.NO_RECORDS_FOUND.getStrValue();
        } else {
            responseMessageCode = MessageCodes.SUCCESS.getStrValue();
        }
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        createRequestResponseHistObject();
        generateReponseMessage(params);
        return createResponse();
    }

    /**
     * Construct the GetCategoryByDomainCatCodeResponse
     * 
     * return GetCategoryByDomainCatCodeResponse
     */
    @Override
    public GetCategoryByDomainCatCodeResponse createResponse() {
        GetCategoryByDomainCatCodeResponse responseObj = new GetCategoryByDomainCatCodeResponse();
        responseObj.setStatus(responseStatus);
        responseObj.setMessage(responseMessage);
        responseObj.setAllCategoryList(categoryList);
        responseObj.setReferenceId(referenceId);
        return responseObj;
    }

    /**
     * Validate the request parameters
     */
    @Override
    public void validateInputs() {
        if (CommonUtils.isNullorEmpty(domainCode)) {
            throw new ValidationException(Constants.DOMAIN_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        if (CommonUtils.isNullorEmpty(this.categoryCode)) {
            throw new ValidationException(Constants.CATEGORY_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        if (CommonUtils.isNullorEmpty(identifierType)) {
            throw new ValidationException(identifierType, MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        if (CommonUtils.isNullorEmpty(identifierValue)) {
            throw new ValidationException(identifierValue, MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        if (CommonUtils.isNullorEmpty(bearerCode)) {
            throw new ValidationException(bearerCode, MessageCodes.FIELD_MANDATORY.getStrValue());
        }
    }

}
