package com.comviva.mfs.service.domain;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.ApplicationException;
import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.controller.DomainGetController;
import com.comviva.mfs.entity.DomainChecker;
import com.comviva.mfs.entity.DomainMaker;
import com.comviva.mfs.model.BaseRequest;
import com.comviva.mfs.model.domain.GetDomainDetailsResponse;
import com.comviva.mfs.repository.DomainCheckerRepository;
import com.comviva.mfs.repository.DomainMakerRepository;
import com.comviva.mfs.repository.SysMessagesRepository;
import com.comviva.mfs.service.CommonService;

/**
 * @author radhakrishnab
 *
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class GetDomainByCodeService extends CommonService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DomainGetController.class);
    private String domainCode;
    private String initiateStatus;
    private DomainChecker domainChecker;
    private DomainMaker domainMaker;
    private DomainMakerRepository domainMakerRepository;
    private DomainCheckerRepository domainCheckerRepository;

    /**
     * @param sysMessagesRepository
     * @param domainCheckerRepository
     */
    @Autowired
    public GetDomainByCodeService(SysMessagesRepository sysMessagesRepository,
            DomainCheckerRepository domainCheckerRepository, DomainMakerRepository domainMakerRepository) {
        this.domainCheckerRepository = domainCheckerRepository;
        this.domainMakerRepository = domainMakerRepository;
        this.sysMessagesRepository = sysMessagesRepository;
    }

    /**
     * Get Domain
     * @param domainCode
     * @param identifierType
     * @param identifierValue
     * @param bearerCode
     * @return GetDomainDetailsResponse
     */
    public GetDomainDetailsResponse execute(String domainCode, String identifierType, String identifierValue,
            String bearerCode, String initiateStatus) {

        List<String> params = new ArrayList<>();
        BaseRequest request = new BaseRequest();
        try {

            this.domainCode = domainCode;
            this.initiateStatus = initiateStatus;
            request.setIdentifierType(identifierType);
            request.setIdentifierValue(identifierValue);
            request.setBearerCode(bearerCode);
            serviceRoleCode = ServiceRoleCodes.VIEW_DOMAIN_ROLE.getStrValue();
            super.initiate(request, serviceRoleCode);
            validateInputs();
            if (initiateStatus.equals(Constants.YES.getStrValue())) {
                domainChecker = new DomainChecker();
                copyObjects(domainChecker, domainMaker);
            }
            responseMessageCode = MessageCodes.SUCCESS.getStrValue();
            responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        } catch (Exception e) {
            LOGGER.error("ApplicationException in {}: {}", "DomainGetController", e);
            responseMessageCode = MessageCodes.NO_RECORDS_FOUND.getStrValue();
        }
        generateReponseMessage(params);
        return createResponse();
    }

    /**
     * Validate the request parameters
     */
    @Override
    public void validateInputs() {
        if (CommonUtils.isNullorEmpty(domainCode)) {
            throw new ValidationException(Constants.DOMAIN_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        if (CommonUtils.isNullorEmpty(initiateStatus)) {
            throw new ValidationException(Constants.INITIATE_STATUS.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        if (!CommonUtils.isYesOrNo(initiateStatus)) {
            throw new ValidationException(Constants.INITIATE_STATUS.getStrValue(),
                    MessageCodes.FIELD_INVALID.getStrValue());
        }
        if (initiateStatus.equals(Constants.YES.getStrValue())) {
            domainMaker = domainMakerRepository.getDomainByCode(domainCode);
            if (null == domainMaker) {
                throw new ApplicationException(MessageCodes.NO_RECORDS_FOUND.getStrValue());
            }
        }
        if (initiateStatus.equals(Constants.NO.getStrValue())) {
            domainChecker = domainCheckerRepository.getDomainByDomainCode(Constants.YES.getStrValue(), domainCode);
            if (null == domainChecker) {
                throw new ApplicationException(MessageCodes.NO_RECORDS_FOUND.getStrValue());
            }
        }
    }

    /**
     * Construct the GetDomainDetailsResponse
     * 
     * return GetDomainDetailsResponse
     */
     
    @Override
    public GetDomainDetailsResponse createResponse() {
        GetDomainDetailsResponse getSingleDomainDetailsResponse = new GetDomainDetailsResponse();
        getSingleDomainDetailsResponse.setStatus(responseStatus);
        getSingleDomainDetailsResponse.setMessage(responseMessage);
        getSingleDomainDetailsResponse.setDomainDetails(domainChecker);
        getSingleDomainDetailsResponse.setReferenceId(referenceId);
        return getSingleDomainDetailsResponse;
    }

}
