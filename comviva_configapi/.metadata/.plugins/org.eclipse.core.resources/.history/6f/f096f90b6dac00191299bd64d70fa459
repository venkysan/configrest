package com.comviva.mfs.controller.test;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.comviva.mfs.MdsApplication;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.constant.test.CategoryTestConstants;
import com.comviva.mfs.constant.test.GroupRoleTestConstants;
import com.comviva.mfs.constant.test.TestBaseConstants;
import com.comviva.mfs.datadrive.test.GroupRoleDataPreparationUtil;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.entity.GradeChecker;
import com.comviva.mfs.entity.GroupRoleMaker;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.GradeCheckerRepository;
import com.comviva.mfs.repository.GroupRoleMakerRepository;
import com.comviva.mfs.repository.SysGroupRoleCheckerRepository;
import com.comviva.mfs.repository.SysGroupRoleMakerRepository;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = MdsApplication.class)
@WebAppConfiguration
public class GroupRoleControllerValidationTest {

    private MockMvc mockMvc;
    @Autowired
    private WebApplicationContext wac;
    @MockBean
    private SysGroupRoleCheckerRepository sysGroupRoleCheckerRepository;
    @MockBean
    private SysGroupRoleMakerRepository sysGroupRoleMakerRepository;
    @MockBean
    private CategoryCheckerRepository categoryCheckerRepository;
    @MockBean
    private GradeCheckerRepository gradeCheckerRepository;
    @MockBean
    private GroupRoleMakerRepository groupRolesMakerRepository;

    @Before
    public void setup() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
    }

    @Test
    public void testDeleteGroupRoleInitiateCheckerValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testDeleteGroupRoleInitiateMakerValidationError() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testDeleteGroupRoleInitiateGroupRoleCodeValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .delete(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateGroupRoleCodeNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testDeleteGroupRoleInitiateGroupRoleCodeAlphaNumericAndLenghtError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateGroupRoleCodeAlphaNumericAndLenghtUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleInitiateRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
   
    @Test
    public void testAddGroupRoleInitiateGroupRoleCodeEmptyValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitiateGroupCodeEmptyRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGroupRoleInitiateGroupRoleCodeAlphaNumericAndLenghtCheckValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitiateGroupRoleCodeAlphaNumericRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddGroupRoleInitiateGroupCodeNullValidationError() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialGroupRoleCodeNullRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAddGroupRoleInitiateGroupRolesMakerRepositoryNotNull() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddGroupRoleApprovalGroupRoleMakerEmptyValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGroupRoleApprovalGroupCodeNullValidationError() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(
                MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleApprovalGroupRoleCodeNullUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(GroupRoleDataPreparationUtil.addGroupRoleApproveRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAddGroupRoleApprovalGroupCodeNullAlphaNumeric() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(
                MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleApprovalGroupRoleCodeAlphaNumericUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(GroupRoleDataPreparationUtil.addGroupRoleApproveRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAddGroupRoleApprovalGroupRoleMakerEmpty() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(null);

        mockMvc.perform(
                MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleApprovalUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(GroupRoleDataPreparationUtil.addGroupRoleApproveRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddGroupRoleApprovalGroupRoleActionNullValidationError() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(
                MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleApprovalGroupRoleActionNullUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(GroupRoleDataPreparationUtil.addGroupRoleApproveRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateGroupRoleApprovalGroupRoleCodeNullValidationError() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(
                MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleApproveGroupRoleCodeNullUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(GroupRoleDataPreparationUtil.updateGroupRoleApproveRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateGroupRoleApprovalGroupRoleCodeAlphaNumeric() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(
                MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleApproveGroupRoleCodeAlphaNumericUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(GroupRoleDataPreparationUtil.updateGroupRoleApproveRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testUpdateGroupRoleApprovalSysGroupRoleMakerEmpty() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(null);

        mockMvc.perform(
                MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleApproveUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(GroupRoleDataPreparationUtil.updateGroupRoleApproveRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testUpdateGroupRoleApprovalActionNullValidationError() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleApprovalActionNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.updateGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testGetGroupRolesByCategoryCodenGradeCodeAndWalletRoleTypeNullGradeCodeValidation() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByCategoryCodeGradeCodeAndWalletRoleNullGradeCodeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(MessageCodes.NO_RECORDS_FOUND.getStrValue()));
    }

    @Test
    public void testGetGroupRolesByCategoryCodeGradeCodeAndNullRoleTypeValidation() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByCategoryCodeGradeCodeAndNullRoleTypeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testGetGroupRolesByCategoryCodenGradeCodeAndNullCategoryCodeValidation() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByCategoryCodenGradeCodeAndNullCategoryCodeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testGetGroupRolesByCategoryCodeGradeCodeAndWalletRoleTypeNullGradeCodeValidation() throws Exception {
        when(sysGroupRoleCheckerRepository.loadWalletGroupRoles(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRoles());

        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByCategoryCodeGradeCodeAndWalletRoleNullGradeCodeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(MessageCodes.NO_RECORDS_FOUND.getStrValue()));
    }

    @Test
    public void testGetGroupRolesByCategoryCodeGradeCodeAndInvalidRoleTypeValidation() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByCategoryCodeGradeCodeAndInvalidRoleTypeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testGetGroupRolesByCategoryCodeGradeCodeAndRoleTypeValidation() throws Exception {
        when(sysGroupRoleCheckerRepository.loadWalletGroupRoles(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesEmpty());

        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByCategoryCodeGradeCodeAndWebRoleUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(MessageCodes.NO_RECORDS_FOUND.getStrValue()));

    }

    @Test
    public void testGetGroupRolesByGroupRoleCodeNullValidation() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get(GroupRoleDataPreparationUtil.getGroupRolesByRoleCodeNullUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testGetGroupRolesByGroupRoleCodeAndNullInitiatedTypeValidation() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByGroupRoleCodeAndNullInitiatedTypeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testGetGroupRolesByGroupRoleCodeAndInvalidInitiatedTypeValidation() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByGroupRoleCodeAndInvalidInitiatedTypeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testGetGroupRolesByGroupRoleCodeAndYesInitiatedTypeValidation() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByGroupRoleCodeAndYesInitiatedTypeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(MessageCodes.GROUP_ROLE_CODE_NOT_FOUND.getStrValue()));
    }

    @Test
    public void testGetGroupRolesByGroupRoleCodeAndBankGroupRoleTypeValidation() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByGroupRoleCodeAndBankGroupRoleTypeUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(MessageCodes.NO_RECORDS_FOUND.getStrValue()));
    }

    @Test
    public void testAaddGroupRoleInitiateServiceListEmpty() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getGradeChecker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialServiceListEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateServiceListServiceNameEmpty() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getGradeChecker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialServiceListsetServiceNameEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateServiceListServiceTypeEmpty() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getGradeChecker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialServiceListsetsetServiceTypeEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateServiceListServiceStatusEmpty() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getGradeChecker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialServiceListsetsetServiceStatusEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
   
    @Test
    public void testAaddGroupRoleInitiateGroupRoleMakerNotEmpty() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(getCategoryChecker());
        when(groupRolesMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(getGroupRoleMaker());        
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
        .thenReturn(getGradeChecker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateSysGroupRoleCheckerNotEmpty() throws Exception {       
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());
        
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateGroupRoleNameEmpty() throws Exception {       
       
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialGroupRoleNameEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateGroupRoleNameAlphaNumeric() throws Exception {       
       
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialGroupRoleNameAlphaNumericRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateCategoryCodeEmpty() throws Exception {       
       
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialCategoryCodeEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateCategoryCodeAlphaNumeric() throws Exception {       
       
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialCategoryCodeAlphaNumericRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateGradeCodeEmpty() throws Exception {       
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
            .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
            .thenReturn(getGradeChecker());

        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialGradeCodeEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateGradeCodeAlphaNumeric() throws Exception {       
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
            .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
            .thenReturn(getGradeChecker());
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialGradeCodeAlphaNumericRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAaddGroupRoleInitiateGradeCheckerEmpty() throws Exception {       
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
            .thenReturn(getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
            .thenReturn(null);
        mockMvc.perform(MockMvcRequestBuilders.post(GroupRoleDataPreparationUtil.addGroupRoleInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.addGroupRoleInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testGetGroupRolesByCategoryCodeEmpty() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByCategoryCodeEmptyUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testGetGroupRolesByGradeCodeEmpty() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get(GroupRoleDataPreparationUtil.getGroupRolesByCategoryCodeGradeCodeAndWalletRoleGradeCodeEmptyUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testDeleteGroupRoleApprovalGroupRoleCodeEmpty() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleApproveGroupRoleEmptyUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testDeleteGroupRoleApprovalGroupRoleCodeAlphaNumeric() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleApproveGroupRoleAlphaNumericUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testDeleteGroupRoleApprovalSysGroupRoleMakerEmpty() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(null);
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleApproveUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testDeleteGroupRoleApprovalSysGroupRoleCheckerEmpty() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(null);

        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleApproveUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testDeleteGroupRoleApprovalActionIsEmpty() throws Exception {
        when(sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesMaker());
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.delete(GroupRoleDataPreparationUtil.deleteGroupRoleApprovelActionNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.deleteGroupRoleApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testUpdateGroupRoleInitiationGroupRoleCodeEmpty() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleInitiationeGroupRoleCodeEmptyUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.updateGroupRoleInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testUpdateGroupRoleInitiationGroupRoleCodeAlphaNumeric() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleInitiationeGroupRoleCodeAlphaNumericUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.updateGroupRoleInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testUpdateGroupRoleInitiationServiceListEmpty() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleInitiationeUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.updateGroupRoleInitialServiceListEmpty())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testUpdateGroupRoleInitiationServiceListServiceNameEmpty() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleInitiationeUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.updateGroupRoleInitialServiceListServiceNameEmpty())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testUpdateGroupRoleInitiationServiceListServiceNameEmpty() throws Exception {
        when(sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(Mockito.anyString()))
                .thenReturn(GroupRoleDataPreparationUtil.getGroupRolesChecker());

        mockMvc.perform(MockMvcRequestBuilders.put(GroupRoleDataPreparationUtil.updateGroupRoleInitiationeUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GroupRoleDataPreparationUtil.updateGroupRoleInitialServiceListServiceNameEmpty())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    private CategoryChecker getCategoryChecker() {
        CategoryChecker categoryChecker = new CategoryChecker();
        categoryChecker.setCategoryCode(CategoryTestConstants.CATEGORY_CODE.getValue());
        return categoryChecker;
    }
    
    private GroupRoleMaker getGroupRoleMaker() {
        GroupRoleMaker groupRoleMaker = new GroupRoleMaker();
        groupRoleMaker.setGroupRoleCode(GroupRoleTestConstants.GROUP_ROLE_CODE.getValue());
        groupRoleMaker.setServicePymtId(12L);
        return groupRoleMaker;
    }

    private GradeChecker getGradeChecker() {
        GradeChecker gradeChecker = new GradeChecker();
        gradeChecker.setCategoryCode(CategoryTestConstants.CATEGORY_CODE.getValue());
        return gradeChecker;
    }
}
