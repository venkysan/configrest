/** 
 * COPYRIGHT: Comviva Technologies Pvt. Ltd.
 * This software is the sole property of Comviva
 * and is protected by copyright law and international
 * treaty provisions. Unauthorized reproduction or
 * redistribution of this program, or any portion of
 * it may result in severe civil and criminal penalties
 * and will be prosecuted to the maximum extent possible
 * under the law. Comviva reserves all rights not
 * expressly granted. You may not reverse engineer, decompile,
 * or disassemble the software, except and only to the
 * extent that such activity is expressly permitted
 * by applicable law notwithstanding this limitation.
 * THIS SOFTWARE IS PROVIDED TO YOU "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 * YOU ASSUME THE ENTIRE RISK AS TO THE ACCURACY
 * AND THE USE OF THIS SOFTWARE. Comviva SHALL NOT BE LIABLE FOR
 * ANY DAMAGES WHATSOEVER ARISING OUT OF THE USE OF OR INABILITY TO
 * USE THIS SOFTWARE, EVEN IF Comviva HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/
package com.comviva.mfs.service.grouprole;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.SysGroupRoleChecker;
import com.comviva.mfs.entity.SysGroupRoleMaker;
import com.comviva.mfs.model.grouprole.DeleteGroupRoleInitiateRequest;
import com.comviva.mfs.model.grouprole.DeleteGroupRoleInitiateResponse;
import com.comviva.mfs.repository.GroupRoleCheckerRepository;
import com.comviva.mfs.repository.GroupRoleMakerRepository;
import com.comviva.mfs.repository.SysGroupRoleCheckerRepository;
import com.comviva.mfs.repository.SysGroupRoleMakerRepository;
import com.comviva.mfs.service.CommonService;

/**
 * This service used for Delete GroupRole Initiate
 * 
 * @author sudharshans
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class DeleteGroupRoleInitiateService extends CommonService {

    private SysGroupRoleChecker sysGroupRoleChecker;
    private SysGroupRoleMaker sysGroupRoleMaker;
    private SysGroupRoleCheckerRepository sysGroupRoleCheckerRepository;
    private SysGroupRoleMakerRepository sysGroupRoleMakerRepository;
    private DeleteGroupRoleInitiateRequest deleteGroupRoleInitiateRequest;
    private String groupRoleCode;

    /**
     * Construct DeleteGroupRoleInitiateService
     * 
     * @param groupRoleCheckerRepository
     *            - groupRoleCheckerRepository
     * @param groupRoleMakerRepository
     *            - groupRoleMakerRepository
     * @param sysGroupRoleMakerRepository
     *            - sysGroupRoleMakerRepository
     * @param sysGroupRoleCheckerRepository
     *            - sysGroupRoleCheckerRepository
     */
    @Autowired
    public DeleteGroupRoleInitiateService(GroupRoleCheckerRepository groupRoleCheckerRepository,
            GroupRoleMakerRepository groupRoleMakerRepository, SysGroupRoleMakerRepository sysGroupRoleMakerRepository,
            SysGroupRoleCheckerRepository sysGroupRoleCheckerRepository) {
        this.sysGroupRoleCheckerRepository = sysGroupRoleCheckerRepository;
        this.sysGroupRoleMakerRepository = sysGroupRoleMakerRepository;
    }

    /**
     * Delete GroupRoleInitiate
     * 
     * @param groupRoleCode
     *            - String
     * @param deleteGroupRoleInitiateRequest
     *            - deleteGroupRoleInitiateRequest
     * @return DeleteGroupRoleInitiateResponse
     */
    public DeleteGroupRoleInitiateResponse execute(String groupRoleCode,
            DeleteGroupRoleInitiateRequest deleteGroupRoleInitiateRequest) {
        Map<String, Object> constructAdminMap = new HashMap<>();
        List<String> params = new ArrayList<>();
        String isApprovalRequired;
        this.deleteGroupRoleInitiateRequest = deleteGroupRoleInitiateRequest;
        this.groupRoleCode = groupRoleCode;
        serviceRoleCode = ServiceRoleCodes.GROUP_ROLE_CURD_ROLE.getStrValue();
        super.initiate(deleteGroupRoleInitiateRequest, serviceRoleCode);
        isApprovalRequired = deleteGroupRoleInitiateRequest.getIsApprovalRequired();
        validateInputs();
        if (null != isApprovalRequired && Constants.ACTIVE_STATUS.getStrValue().equals(isApprovalRequired)) {
            sysGroupRoleMaker = new SysGroupRoleMaker();
            copyObjects(sysGroupRoleMaker, sysGroupRoleChecker);
            sysGroupRoleMaker.setStatus(Constants.DELETE_INITIATE_STATUS.getStrValue());
            sysGroupRoleMakerRepository.save(sysGroupRoleMaker);
            constructAdminMap.put("newObject", sysGroupRoleMaker);
            constructAdminMap.put("oldObject", sysGroupRoleChecker);
            params.add(sysGroupRoleMaker.getGroupRoleCode());
            responseMessageCode = MessageCodes.GROUP_ROLE_DELETE_INIT_SUCCESS.getStrValue();
        } else {
            constructAdminMap.put("oldObject", sysGroupRoleChecker);
            sysGroupRoleCheckerRepository.save(sysGroupRoleChecker);
            params.add(sysGroupRoleChecker.getGroupRoleCode());
            constructAdminMap.put("newObject", sysGroupRoleChecker);
            responseMessageCode = MessageCodes.GROUP_ROLE_DELETE_APPR_SUCCESS.getStrValue();
        }
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        createRequestResponseHistObject();
        createAuditLogMap(constructAdminMap);
        generateReponseMessage(params);
        return createResponse();
    }

    /**
     * Validate the request parameters
     */
    public void validateInputs() {
        if (CommonUtils.isNullorEmpty(groupRoleCode)) {
            throw new ValidationException(Constants.GROUP_ROLE_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isAlphaNumericAndLenghtCheck(groupRoleCode, groupRoleCode.length(),
                Constants.GROUPROLE_CODE_LENGTH.getIntValue())) {
            throw new ValidationException(Constants.GROUP_ROLE_CODE.getStrValue(),
                    MessageCodes.FIELD_ALPHANUMERIC.getStrValue());
        }
        
        if (CommonUtils.isNullorEmpty(deleteGroupRoleInitiateRequest.getIsApprovalRequired())) {
            throw new ValidationException(Constants.IS_APPROVE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isApprovalRequired(deleteGroupRoleInitiateRequest.getIsApprovalRequired())) {
            throw new ValidationException(Constants.IS_APPROVE.getStrValue(),
                    MessageCodes.FIELD_INVALID.getStrValue());
        }
        
        sysGroupRoleChecker = sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(groupRoleCode);
        if (sysGroupRoleChecker == null) {
            throw new ValidationException(groupRoleCode, MessageCodes.GROUP_ROLE_CODE_NOT_FOUND.getStrValue());
        }
        sysGroupRoleMaker = sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(groupRoleCode);
        if (sysGroupRoleMaker != null) {
            throw new ValidationException(groupRoleCode, MessageCodes.UNDER_APPROVAL.getStrValue());
        }
    }

    /**
     * Construct the DeleteGroupRoleInitiateResponse
     * 
     * @return DeleteGroupRoleInitiateResponse
     */
    @Override
    public DeleteGroupRoleInitiateResponse createResponse() {
        DeleteGroupRoleInitiateResponse deleteGroupRoleInitiateResponse = new DeleteGroupRoleInitiateResponse();
        deleteGroupRoleInitiateResponse.setStatus(responseStatus);
        deleteGroupRoleInitiateResponse.setExternalRefId(deleteGroupRoleInitiateRequest.getExternalRefId());
        deleteGroupRoleInitiateResponse.setReferenceId(referenceId);
        deleteGroupRoleInitiateResponse.setMessage(responseMessage);
        return deleteGroupRoleInitiateResponse;
    }

}
