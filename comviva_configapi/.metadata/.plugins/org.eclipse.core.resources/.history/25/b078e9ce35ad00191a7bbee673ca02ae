package com.comviva.mfs.controller.test;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.comviva.mfs.constant.test.TestBaseConstants;
import com.comviva.mfs.datadrive.test.CategoryDataPreparationUtil;
import com.comviva.mfs.datadrive.test.GradeDataPreparationUtil;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.DomainCheckerRepository;
import com.comviva.mfs.repository.GradeCheckerRepository;
import com.comviva.mfs.repository.GradeMakerRepository;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class GradeControllerValidationTest {

    @LocalServerPort
    private int port;
    @MockBean
    private GradeCheckerRepository gradeCheckerRepository;
    @MockBean
    private GradeMakerRepository gradeMakerRepository;
    @MockBean
    private DomainCheckerRepository domainCheckerRepository;
    @MockBean
    private CategoryCheckerRepository categoryCheckerRepository;

    private MockMvc mockMvc;
    @Autowired
    private WebApplicationContext wac;

    @Before
    public void setup() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
    }

    // add Grade initiate
    @Test
    public void testAddGradesInitiateGradeCodeEmptyValidationError() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradesInitialGradeCodeEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateIsApprovalRequiredEmpty() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradesInitialIsApprovalRequiredEmptyRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateIsApprovalRequiredNotYesOrNo() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradesInitialIsApprovalRequiredNotYesOrNoRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateGradeAlphaNumericAndLenghtCheckValidationError() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradesInitialGradeCodeAlphaNumericRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateGradeNameEmptyValidationError() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradesInitialGradeNameEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateGradeNameAlphaNumericValidationError() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradesInitialGradeNameAlphaNumericRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateDomainCodeEmptyValidationError() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradesInitialDomainCodeEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateCategoryCodeEmptyValidationError() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradesInitialCategoryCodeEmptyRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateDomainCodeNotFoundValidationError() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateCategoryCodeNull() throws Exception {
        when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getDomainChecker());
        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateGradeMakerNotNull() throws Exception {
        when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getDomainChecker());
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryChecker());
        when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeMaker());
        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradesInitiateGradeCheckerNull() throws Exception {
        when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getDomainChecker());
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeChecker());
        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradeApprovalGradeMakerEmptyValidationError() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradeApprovalGradeGradeCodeEmptyValidationError() throws Exception {
        when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeApprovalGradeCodeNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradeApprovalGradeActionEmptyValidationError() throws Exception {
        when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeApprovalActionNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradeApprovalGradeGradeCodeAlphaNumericValidationError() throws Exception {
        when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeApprovalGradeCodeAlphaNumUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradeApprovalActionReject() throws Exception {
        when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeRejectUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.SUCCESS_STATUS.getValue()));

    }

    @Test
    public void testUpdateGradeApprovalGradeCodeNullValidationError() throws Exception {
        when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeApprovalCategoryCodeNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testGetGradeByGradeCode() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testGetGradeByGradeCodeEmptyCase() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceEmptyCaseUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testGetGradeByGradeCodeInitiateStatusEmptyCase() throws Exception {

        mockMvc.perform(
                MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceInitiateStatusEmptyCaseUrl())
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testGetGradeByGradeCodeInitiateStatusNoYesOrNo() throws Exception {

        mockMvc.perform(
                MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceInitiateStatusNoYesOrNoUrl())
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradeInitiateGradeCodeNullValidation() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateGradeCodeNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradeInitiateActionNullValidation() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateActionNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradeInitiateGradeCodeAlphaNumValidation() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateGradeCodeAlphaNumUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradeInitiateValidation() throws Exception {

        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testGetAllGradeServiceInitiateStatusEmptyCase() throws Exception {
        when(gradeCheckerRepository.getAllActiveGrades(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGrades());
        mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getAllGradesInitiateStatusEmptyCaseUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testGetAllGradeServiceInitiateStatusNoYesOrNo() throws Exception {
        when(gradeCheckerRepository.getAllActiveGrades(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGrades());
        mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getAllGradesInitiateStatusNoYesOrNoUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradeInitiateWithGradeMaker() throws Exception {
        when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getDomainChecker());
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryChecker());
        when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeMaker());
        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradeInitiateWithGradeChecker() throws Exception {
        when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getDomainChecker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeChecker());
        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradeInitiateGradeCodeEmpty() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateGradeCodeEmptyUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradesInitiateGradeCodeAlphaNumericAndLenghtCheckValidationError() throws Exception {
        mockMvc.perform(
                MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateGradeCodeAlphaNumLenghtUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(GradeDataPreparationUtil.updateGradeInitialRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradesInitiateGradeNameEmptyCase() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeInitialGradeNameEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradesInitiateIsApprovalRequiredEmptyCase() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeInitialIsApprovalRequiredEmptyRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradesInitiateIsApprovalRequiredNotYesOrNoCase() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeInitialIsApprovalRequiredNotYesOrNoRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradesInitiateGradeNameAlphaNumericAndLenghtCheck() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeInitialGradeNameAlphaNumericRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testDeleteGradeApprovalGradeCheckerEmpty() throws Exception {
        when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeMaker());
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString())).thenReturn(null);
        mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.deleteGradeApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradeInitiateDomainCheckerEmpty() throws Exception {
        when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString())).thenReturn(null);
        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradeInitiateGradeCheckerListNotEmpty() throws Exception {
        when(gradeCheckerRepository.getGradeByGradeCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeChecker());
        when(gradeCheckerRepository.getGradeByGradeName(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGrades());
        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testAddGradeApprovalWithinvalidActionValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeApprovalWithInvalidActionUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.addGradeApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testUpdateGradeApprovalWithinvalidActionValidationError() throws Exception {
        when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
                .thenReturn(GradeDataPreparationUtil.getGradeMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeApprovalWithInvalidActionUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(GradeDataPreparationUtil.updateGradeApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

    }

    @Test
    public void testDeleteGradeApprovalWithinvalidActionValidationError() throws Exception {
        mockMvc.perform(
                MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeApprovalWithInvalidActionUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(GradeDataPreparationUtil.deleteGradeApproveRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
}