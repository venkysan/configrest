package com.comviva.mfs.repository.repositoryimpl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.springframework.stereotype.Component;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.DbConstants;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.repository.RolesCustomRepository;
import com.google.common.collect.Maps;

/**
 * Created by suresh.sahu1 on 24-05-2019.
 */
@Component
@SuppressWarnings({
        "unchecked", "rawtypes"
})
public class RolesRepositoryImpl implements RolesCustomRepository {

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public List<Map> loadRoleListByCategoryCode(String categoryCode) {
        Query partyTypeList = entityManager.createQuery(
                "select P.moduleCode,RL.roleName,MC.roleCode,coalesce(P.servicePymtId,0),P.pageCode FROM CategoryRoles MC,Roles RL "
                        + ", PageRoles PR, Pages P, Modules M WHERE MC.categoryCode=:categoryCode and MC.roleCode=RL.roleCode "
                        + "AND P.moduleCode=M.moduleCode AND RL.roleCode=PR.roleCode AND PR.pageCode=P.pageCode AND RL.status <>'N' "
                        + " group by(P.moduleCode, P.pageCode, MC.roleCode,RL.roleName, M.sequenceNo, P.sequenceNo, P.servicePymtId) ORDER BY M.sequenceNo, P.sequenceNo ");
        partyTypeList.setParameter("categoryCode", categoryCode);
        return getRoleList(partyTypeList.getResultList());
    }

    private List<Map> getRoleList(List<Object[]> list) {
        List<Map> roleList = new ArrayList();
        Map roleMap = null;
        int counter = 0;
        String moduleCode = "";
        String[] storedRoleCodes = new String[list.size()];
        String tRoleCode = null;
        String tempModuleCode = null;
        boolean isRoleExists = false;
        for (Object[] row : list) {
            roleMap = Maps.newHashMap();
            tempModuleCode = (String) row[0];
            if (counter > 0) {
                tRoleCode = (String) row[DbConstants.TWO.getIntValue()];
                for (int i = 0; i < storedRoleCodes.length; i++) {
                    if (tRoleCode.equals(storedRoleCodes[i])) {
                        isRoleExists = true;
                        break;
                    }
                }
                storedRoleCodes[counter] = (String) row[DbConstants.TWO.getIntValue()];
                counter++;
                if (isRoleExists) {
                    continue;
                }
            } else {
                storedRoleCodes[0] = (String) row[DbConstants.TWO.getIntValue()];
                counter++;
            }
            roleList.add(getRoleMap(moduleCode, tempModuleCode, row, roleMap));
        }
        return roleList;
    }

    private Map getRoleMap(String moduleCode, String tempModuleCode, Object[] row, Map roleMap) {
        if (CommonUtils.isNullorEmpty(moduleCode) || !tempModuleCode.equals(moduleCode)) {
            moduleCode = tempModuleCode;
            roleMap.put(Constants.MODULE_CODE.getStrValue(), moduleCode);
            roleMap.put(Constants.ROLE_NAME.getStrValue(), row[DbConstants.ONE.getIntValue()]);
            roleMap.put(Constants.ROLE_CODE.getStrValue(), row[DbConstants.TWO.getIntValue()]);
            roleMap.put(Constants.SERVICE_PAYMT_ID.getStrValue(), row[DbConstants.THREE.getIntValue()]);
        } else {
            roleMap.put(Constants.MODULE_CODE.getStrValue(), moduleCode);
            roleMap.put(Constants.ROLE_NAME.getStrValue(), row[DbConstants.ONE.getIntValue()]);
            roleMap.put(Constants.ROLE_CODE.getStrValue(), row[DbConstants.TWO.getIntValue()]);
            roleMap.put(Constants.SERVICE_PAYMT_ID.getStrValue(), row[DbConstants.THREE.getIntValue()]);
        }
        return roleMap;
    }

}
