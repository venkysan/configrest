/** 
 * COPYRIGHT: Comviva Technologies Pvt. Ltd.
 * This software is the sole property of Comviva
 * and is protected by copyright law and international
 * treaty provisions. Unauthorized reproduction or
 * redistribution of this program, or any portion of
 * it may result in severe civil and criminal penalties
 * and will be prosecuted to the maximum extent possible
 * under the law. Comviva reserves all rights not
 * expressly granted. You may not reverse engineer, decompile,
 * or disassemble the software, except and only to the
 * extent that such activity is expressly permitted
 * by applicable law notwithstanding this limitation.
 * THIS SOFTWARE IS PROVIDED TO YOU "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 * YOU ASSUME THE ENTIRE RISK AS TO THE ACCURACY
 * AND THE USE OF THIS SOFTWARE. Comviva SHALL NOT BE LIABLE FOR
 * ANY DAMAGES WHATSOEVER ARISING OUT OF THE USE OF OR INABILITY TO
 * USE THIS SOFTWARE, EVEN IF Comviva HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/
package com.comviva.mfs.service.domain;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.ErrorCodes;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.DomainChecker;
import com.comviva.mfs.entity.DomainMaker;
import com.comviva.mfs.model.domain.UpdateDomainInitiateRequest;
import com.comviva.mfs.model.domain.UpdateDomainInitiateResponse;
import com.comviva.mfs.repository.DomainCheckerRepository;
import com.comviva.mfs.repository.DomainMakerRepository;
import com.comviva.mfs.service.CommonService;

/**
 * This service used for Delete Domain Initiate
 * 
 * @author sudharshans
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class UpdateDomainInitiateService extends CommonService {

    private DomainChecker domainChecker;
    private DomainMaker domainMaker;
    private DomainCheckerRepository domainCheckerRepository;
    private DomainMakerRepository domainMakerRepository;
    private String domainCode;
    private UpdateDomainInitiateRequest updateDomainInitiateRequest;

    @Autowired
    private KafkaTemplate<String, Object> kafkaTemplate;

    /**
     * Construct UpdateDomainInitiateService
     * 
     * @param domainCheckerRepository
     *            - domainCheckerRepository
     * @param domainMakerRepository
     *            - domainMakerRepository
     */
    @Autowired
    public UpdateDomainInitiateService(DomainCheckerRepository domainCheckerRepository,
            DomainMakerRepository domainMakerRepository) {
        this.domainCheckerRepository = domainCheckerRepository;
        this.domainMakerRepository = domainMakerRepository;
    }

    /**
     * Delete Domain Initiate
     * 
     * @param domainCode
     *            - String
     * @param updateDomainInitiateRequest
     *            - updateDomainInitiateRequest
     * @return UpdateDomainInitiateResponse
     */
    public UpdateDomainInitiateResponse execute(String domainCode,
            UpdateDomainInitiateRequest updateDomainInitiateRequest) {
        Map<String, Object> constructAdminMap = new HashMap<>();
        List<String> params = new ArrayList<>();
        String isApprovalRequired;
        this.domainCode = domainCode;
        this.updateDomainInitiateRequest = updateDomainInitiateRequest;
        serviceRoleCode = ServiceRoleCodes.UPDATE_DOMAIN_INIT_ROLE.getStrValue();
        super.initiate(updateDomainInitiateRequest, serviceRoleCode);
        isApprovalRequired = updateDomainInitiateRequest.getIsApprovalRequired();
        validateInputs();
        if (null != isApprovalRequired && Constants.ACTIVE_STATUS.getStrValue().equals(isApprovalRequired)) {
            createMakerData();
            domainMakerRepository.save(domainMaker);
            constructAdminMap.put(NEW_OBJECT, domainMaker);
            constructAdminMap.put(OLD_OBJECT, domainChecker);
            responseMessageCode = MessageCodes.DOMAIN_UPDATE_INIT_SUCCESS.getStrValue();
            responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
            params.add(domainMaker.getDomainName());
        } else {
            constructAdminMap.put(OLD_OBJECT, domainChecker);
            createCheckerData();
            domainCheckerRepository.save(domainChecker);
            constructAdminMap.put(NEW_OBJECT, domainChecker);
            params.add(domainChecker.getDomainName());
            responseMessageCode = MessageCodes.DOMAIN_UPDATE_APPR_SUCCESS.getStrValue();
            kafkaTemplate.send("domainChecker", domainChecker);
        }
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        createRequestResponseHistObject();
        createAuditLogMap(constructAdminMap);
        generateReponseMessage(params);
        return createResponse();
    }

    private void createMakerData() {
        domainMaker = new DomainMaker();
        copyObjects(domainMaker, domainChecker);
        domainMaker.setStatus(Constants.UPDATE_INITIATE_STATUS.getStrValue());
        if (!CommonUtils.isNullorEmpty(updateDomainInitiateRequest.getDomainName())) {
            domainMaker.setDomainName(updateDomainInitiateRequest.getDomainName());
        }
        if (!CommonUtils.isNullorEmpty(updateDomainInitiateRequest.getNumOfCat())) {
            domainMaker.setNumOfCat(Integer.parseInt(updateDomainInitiateRequest.getNumOfCat()));
        }
    }

    private void createCheckerData() {
        domainChecker.setStatus(Constants.ACTIVE_STATUS.getStrValue());
        if (!CommonUtils.isNullorEmpty(updateDomainInitiateRequest.getDomainName())) {
            domainChecker.setDomainName(updateDomainInitiateRequest.getDomainName());
        }
        if (!CommonUtils.isNullorEmpty(updateDomainInitiateRequest.getNumOfCat())) {
            domainChecker.setNumOfCat(Integer.parseInt(updateDomainInitiateRequest.getNumOfCat()));
        }
    }

    /**
     * Validate the request parameters
     */
    @Override
    public void validateInputs() {
        domainNameValidation();
        if (null != updateDomainInitiateRequest.getNumOfCat()) {
            if (!CommonUtils.isNumeric(updateDomainInitiateRequest.getNumOfCat())) {
                throw new ValidationException(updateDomainInitiateRequest.getNumOfCat(),
                        ErrorCodes.NUM_OF_CAT_NUMERIC.getErrorCode());
            }
            int categoryNum = Integer.parseInt(updateDomainInitiateRequest.getNumOfCat());
            if (categoryNum <= 0) {
                throw new ValidationException(updateDomainInitiateRequest.getNumOfCat(),
                        ErrorCodes.CAT_NUM_NOT_VALID.getErrorCode());
            }
        }
        domainChecker = domainCheckerRepository.getDomainByDomainCode(Constants.YES.getStrValue(), domainCode);
        if (null == domainChecker) {
            throw new ValidationException(updateDomainInitiateRequest.getDomainName(),
                    MessageCodes.DOMAIN_NOT_FOUND.getStrValue());
        }
        domainMaker = domainMakerRepository.getDomainByDomainCode(Constants.UPDATE_INITIATE_STATUS.getStrValue(),
                domainCode);
        if (null != domainMaker) {
            throw new ValidationException(updateDomainInitiateRequest.getDomainName(),
                    MessageCodes.DOMAIN_ALREDAY_INIT.getStrValue());
        }
    }

    private void domainNameValidation() {
        if (!CommonUtils.isNullorEmpty(updateDomainInitiateRequest.getDomainName())) {
            if (updateDomainInitiateRequest.getDomainName().length() > Constants.DOMAIN_NAME_LENGTH.getIntValue()) {
                throw new ValidationException(updateDomainInitiateRequest.getDomainName(),
                        ErrorCodes.DOMAIN_NAME_LENGTH_INVALID.getErrorCode());
            }
            if (!CommonUtils.isAlphaNumeric(updateDomainInitiateRequest.getDomainName())) {
                throw new ValidationException(updateDomainInitiateRequest.getDomainName(),
                        ErrorCodes.DOMAIN_NAME_ALPHANUMERIC.getErrorCode());
            }
            if (!CommonUtils.isNullorEmpty(domainCheckerRepository.getDomainByDomainName(Constants.YES.getStrValue(),
                    updateDomainInitiateRequest.getDomainName()))
                    || !CommonUtils.isNullorEmpty(domainMakerRepository.getDomainByDomainName(
                            Constants.YES.getStrValue(), updateDomainInitiateRequest.getDomainName()))) {
                throw new ValidationException(updateDomainInitiateRequest.getDomainName(),
                        ErrorCodes.DOMAIN_NAME_NOT_UNIQUE.getErrorCode());
            }
        }else if (CommonUtils.isNullorEmpty(updateDomainInitiateRequest.getIsApprovalRequired())) {
            throw new ValidationException(Constants.IS_APPROVE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isApprovalRequired(updateDomainInitiateRequest.getIsApprovalRequired())) {
            throw new ValidationException(Constants.IS_APPROVE.getStrValue(), 
                    MessageCodes.FIELD_INVALID.getStrValue());
        }
        
    }

    /**
     * Construct the UpdateDomainInitiateResponse
     * 
     * return UpdateDomainInitiateResponse
     */
    @Override
    public UpdateDomainInitiateResponse createResponse() {
        UpdateDomainInitiateResponse updateDomainInitiateResponse = new UpdateDomainInitiateResponse();
        updateDomainInitiateResponse.setStatus(responseStatus);
        updateDomainInitiateResponse.setExternalRefId(updateDomainInitiateRequest.getExternalRefId());
        updateDomainInitiateResponse.setReferenceId(referenceId);
        updateDomainInitiateResponse.setMessage(responseMessage);
        return updateDomainInitiateResponse;
    }

}
