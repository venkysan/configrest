package com.comviva.mfs.repository.test;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import com.comviva.mfs.common.SupportApiConstants;
import com.comviva.mfs.model.category.CategoryService;
import com.comviva.mfs.model.category.ServiceTypesResponse;
import com.comviva.mfs.repository.SupportApiCustomRepository;
import com.comviva.mfs.repository.SystemDataRepository;
import com.comviva.mfs.repository.repositoryimpl.SupportApiCustomRepositoryImpl;

@RunWith(MockitoJUnitRunner.class)
public class SupportApiCustomRepositoryTest {

	@Mock
	private EntityManager entityManager;

	@Mock
	private Query mockedQuery;

	@Mock
	private SystemDataRepository systemDataRepository;

	@InjectMocks
	private SupportApiCustomRepository supportApiCustomRepository = new SupportApiCustomRepositoryImpl();

	@Before
	public void init() {
		when(entityManager.createQuery(Mockito.anyString())).thenReturn(mockedQuery);
	}

	@Test
	public void getBankDetailsTest() {
		when(mockedQuery.getResultList()).thenReturn(getResult());
		@SuppressWarnings("rawtypes")
		List<Map> listMap = supportApiCustomRepository.getWalletOrBankDetails(101l,
				SupportApiConstants.PAYMENT_METHOD_TYPE_BANK.getStrValue(), "12", "123");
		for (@SuppressWarnings("rawtypes")
		Map map : listMap) {

			assertThat(map.get("serviceName"), is(((Object[]) getResult().get(0))[0]));
			assertThat(map.get("serviceId"), is(((Object[]) getResult().get(0))[1]));
			assertThat(map.get("serviceType"), is(((Object[]) getResult().get(0))[2]));

		}
	}

	@Test
	public void getWalletDetailsTest() {
		when(mockedQuery.getResultList()).thenReturn(getResult());
		@SuppressWarnings("rawtypes")
		List<Map> listMap = supportApiCustomRepository.getWalletOrBankDetails(101l,
				SupportApiConstants.PAYMENT_METHOD_TYPE_WALLET.getStrValue(), "12", "123");
		for (@SuppressWarnings("rawtypes")
		Map map : listMap) {
			assertThat(map.get("serviceName"), is(((Object[]) getResult().get(0))[0]));
			assertThat(map.get("serviceId"), is(((Object[]) getResult().get(0))[1]));
			assertThat(map.get("serviceType"), is(((Object[]) getResult().get(0))[2]));
		}
	}
	
	@Test
	public void getLoadWalServicesForPayeeBlockTest() {
		when(mockedQuery.getResultList()).thenReturn(getCategoryService());
		List<CategoryService> listMap = supportApiCustomRepository.loadWalServicesForPayeeBlock("MER");
		for (int i = 0; i < listMap.size(); i++) {
			assertThat(listMap.get(i).getServicePymtId(), is((getCategoryService().get(i))[0]));
			assertThat(listMap.get(i).getDescription(), is((getCategoryService().get(i))[1]));
			assertThat(listMap.get(i).getServiceType(), is((getCategoryService().get(i))[2]));
			assertThat(listMap.get(i).getPayerDomainCode(), is((getCategoryService().get(i))[3]));
			assertThat(listMap.get(i).getPayeeDomainCode(), is((getCategoryService().get(i))[4]));
			assertThat(listMap.get(i).getInitiatorDomainCode(), is((getCategoryService().get(i))[5]));
		}

	}

	@Test
	public void getLoadWalServicesForPayerBlockTest() {
		when(mockedQuery.getResultList()).thenReturn(getCategoryService());
		List<CategoryService> listMap = supportApiCustomRepository.loadWalServicesForPayerBlock("MER");
		for (int i = 0; i < listMap.size(); i++) {
			assertThat(listMap.get(i).getServicePymtId(), is((getCategoryService().get(i))[0]));
			assertThat(listMap.get(i).getDescription(), is((getCategoryService().get(i))[1]));
			assertThat(listMap.get(i).getServiceType(), is((getCategoryService().get(i))[2]));
			assertThat(listMap.get(i).getPayerDomainCode(), is((getCategoryService().get(i))[3]));
			assertThat(listMap.get(i).getPayeeDomainCode(), is((getCategoryService().get(i))[4]));
			assertThat(listMap.get(i).getInitiatorDomainCode(), is((getCategoryService().get(i))[5]));
		}

	}

	@Test
	public void getLoadWalServicesForInitiatorBlockTest() {
		when(mockedQuery.getResultList()).thenReturn(getCategoryService());
		List<CategoryService> listMap = supportApiCustomRepository.loadWalServicesForInitiatorBlock("MER");
		for (int i = 0; i < listMap.size(); i++) {
			assertThat(listMap.get(i).getServicePymtId(), is((getCategoryService().get(i))[0]));
			assertThat(listMap.get(i).getDescription(), is((getCategoryService().get(i))[1]));
			assertThat(listMap.get(i).getServiceType(), is((getCategoryService().get(i))[2]));
			assertThat(listMap.get(i).getPayerDomainCode(), is((getCategoryService().get(i))[3]));
			assertThat(listMap.get(i).getPayeeDomainCode(), is((getCategoryService().get(i))[4]));
			assertThat(listMap.get(i).getInitiatorDomainCode(), is((getCategoryService().get(i))[5]));
		}

	}

	@Test
	public void getLoadBankServicesForPayerBlockTest() {
		when(mockedQuery.getResultList()).thenReturn(getCategoryService());
		List<CategoryService> listMap = supportApiCustomRepository.loadBankServicesForPayerBlock("MER");
		for (int i = 0; i < listMap.size(); i++) {
			assertThat(listMap.get(i).getServicePymtId(), is((getCategoryService().get(i))[0]));
			assertThat(listMap.get(i).getDescription(), is((getCategoryService().get(i))[1]));
			assertThat(listMap.get(i).getServiceType(), is((getCategoryService().get(i))[2]));
			assertThat(listMap.get(i).getPayerDomainCode(), is((getCategoryService().get(i))[3]));
			assertThat(listMap.get(i).getPayeeDomainCode(), is((getCategoryService().get(i))[4]));
			assertThat(listMap.get(i).getInitiatorDomainCode(), is((getCategoryService().get(i))[5]));
		}

	}

	@Test
	public void getLoadBankServicesForPayeeBlockTest() {
		when(mockedQuery.getResultList()).thenReturn(getCategoryService());
		List<CategoryService> listMap = supportApiCustomRepository.loadBankServicesForPayeeBlock("MER");
		for (int i = 0; i < listMap.size(); i++) {
			assertThat(listMap.get(i).getServicePymtId(), is((getCategoryService().get(i))[0]));
			assertThat(listMap.get(i).getDescription(), is((getCategoryService().get(i))[1]));
			assertThat(listMap.get(i).getServiceType(), is((getCategoryService().get(i))[2]));
			assertThat(listMap.get(i).getPayerDomainCode(), is((getCategoryService().get(i))[3]));
			assertThat(listMap.get(i).getPayeeDomainCode(), is((getCategoryService().get(i))[4]));
			assertThat(listMap.get(i).getInitiatorDomainCode(), is((getCategoryService().get(i))[5]));
		}

	}

	@Test
	public void getLoadBankServicesForInitiatorBlockTest() {
		when(mockedQuery.getResultList()).thenReturn(getCategoryService());
		List<CategoryService> listMap = supportApiCustomRepository.loadBankServicesForInitiatorBlock("MER");
		for (int i = 0; i < listMap.size(); i++) {
			assertThat(listMap.get(i).getServicePymtId(), is((getCategoryService().get(i))[0]));
			assertThat(listMap.get(i).getDescription(), is((getCategoryService().get(i))[1]));
			assertThat(listMap.get(i).getServiceType(), is((getCategoryService().get(i))[2]));
			assertThat(listMap.get(i).getPayerDomainCode(), is((getCategoryService().get(i))[3]));
			assertThat(listMap.get(i).getPayeeDomainCode(), is((getCategoryService().get(i))[4]));
			assertThat(listMap.get(i).getInitiatorDomainCode(), is((getCategoryService().get(i))[5]));
		}

	}

	@Test
	public void getLoadNonServicesForInitiatorBlockTest() {
		when(mockedQuery.getResultList()).thenReturn(getCategoryService());
		List<CategoryService> listMap = supportApiCustomRepository.loadNonServicesForInitiatorBlock("MER");
		for (int i = 0; i < listMap.size(); i++) {
			assertThat(listMap.get(i).getServicePymtId(), is((getCategoryService().get(i))[0]));
			assertThat(listMap.get(i).getDescription(), is((getCategoryService().get(i))[1]));
			assertThat(listMap.get(i).getServiceType(), is((getCategoryService().get(i))[2]));
			assertThat(listMap.get(i).getPayerDomainCode(), is((getCategoryService().get(i))[3]));
			assertThat(listMap.get(i).getPayeeDomainCode(), is((getCategoryService().get(i))[4]));
			assertThat(listMap.get(i).getInitiatorDomainCode(), is((getCategoryService().get(i))[5]));
		}

	}

	@Test
	public void getAllServiceTypesTest() {
		when(mockedQuery.getResultList()).thenReturn(getServiceTypes());
		List<ServiceTypesResponse> listMap = supportApiCustomRepository.getAllServiceTypes();
		for (int i = 0; i < listMap.size(); i++) {
			assertThat(listMap.get(i).getServiceType(), is((getServiceTypes().get(i))[0]));
			assertThat(listMap.get(i).getServiceName(), is((getServiceTypes().get(i))[1]));
		}

	}	
	

	private List<Object[]> getServiceTypes() {
		List<Object[]> list = new ArrayList<>();
		Object[] objArray = new Object[2];
		objArray[0] = "VIEWBILL";
		objArray[1] = "View Bill";
		list.add(objArray);
		return list;
	}

	private List<Object[]> getResult() {
		List<Object[]> list = new ArrayList<>();
		Object[] objArray = new Object[3];
		objArray[0] = "Cash In";
		objArray[1] = "1";
		objArray[2] = 60l;
		list.add(objArray);
		return list;

	}

	private List<Object[]> getCategoryService() {
		List<Object[]> list = new ArrayList<>();
		Object[] objArray = new Object[6];
		objArray[0] = 201l;
		objArray[1] = "IMT Stock Creation";
		objArray[2] = "CWBOTHREQ";
		objArray[3] = "MER";
		objArray[4] = "MERCHANT";
		objArray[5] = "MER";
		list.add(objArray);
		return list;
	}
	
	private List<Object[]> getlinkedWalletOrBankList() {
		List<Object[]> list = new ArrayList<>();
		Object[] objArray = new Object[2];
		objArray[0] = 40l;
		objArray[1] = "primary";
		list.add(objArray);
		return list;
	}

}
