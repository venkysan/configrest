package com.comviva.mfs.controller.test;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.comviva.mfs.MdsApplication;
import com.comviva.mfs.constant.test.TestBaseConstants;
import com.comviva.mfs.datadrive.test.CategoryDataPreparationUtil;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.CategoryMakerRepository;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = MdsApplication.class)
@WebAppConfiguration
public class CategoryControllerValidationTest {

    private MockMvc mockMvc;
    @Autowired
    private WebApplicationContext wac;
    @MockBean
    private CategoryCheckerRepository categoryCheckerRepository;
    @MockBean
    private CategoryMakerRepository categoryMakerRepository;

    @Before
    public void setup() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
    }

    @Test
    public void testAddCategoriesInitiateCategoryCodeEmptyValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryInitialCategoryCodeEmptyRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesInitiateCategoryCodeAlphaNumericValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryInitialCategoryCodeAlphaNumericRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
    
    @Test
    public void testAddCategoriesInitiateCategoryCodeEmptyValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryInitialCategoryCodeEmptyRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }


    @Test
    public void testAddCategoriesInitiateCategoryNameEmptyValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryInitialCategoryNameEmptyRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesInitiateCategoryNameAlphaNumericValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryInitialCategoryNameAlphaNumericRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesInitiateCategoryMakerNotNullValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesInitiateCategoryCheckerNotNullValidationError() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryChecker());

        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesApprovalCategoryMakerEmptyValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesApprovalCategoryCodeEmptyValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(
                MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesApprovalCategoryCodeNullUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(CategoryDataPreparationUtil.addCategoryApproveRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesApprovalActionEmptyValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesApprovalActionNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesInitiateCategoryCodeEmptyValidationError() throws Exception {
        mockMvc.perform(
                MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesInitiateCategoryCodeNullUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(CategoryDataPreparationUtil.updateCategoryInitialRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesInitiateCategoryNameEmptyValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryInitialCategoryNameEmptyRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesInitiateParentCategoryCodeEmptyValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryInitialParentCategoryCodeEmptyRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesInitiateCategoryCheckerEmpty() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesInitiateCategoryMakerNotNull() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryChecker());

        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalCategoryMakerNullValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalActionReject() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesRejectUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalCategoryCodeNullValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(
                MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalCategoryCodeNullUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(CategoryDataPreparationUtil.updateCategoryApproveRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalActionNullValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalActionNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testDeleteCategoriesInitiateCategoryCheckerValidationError() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.delete(CategoryDataPreparationUtil.deleteCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.deleteCategoryInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testDeleteCategoriesInitiateCategoryMakerValidationError() throws Exception {
        when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryChecker());
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.delete(CategoryDataPreparationUtil.deleteCategoriesInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.deleteCategoryInitialRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testDeleteCategoriesInitiateCategoryCodeValidationError() throws Exception {
        mockMvc.perform(
                MockMvcRequestBuilders.delete(CategoryDataPreparationUtil.deleteCategoriesInitiateCategoryCodeNullUrl())
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                        .content(CategoryDataPreparationUtil.deleteCategoryInitialRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalAndWalletAndNullCategoryDetailsValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalActionNullUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryApproveRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalAndWalletWithNullPayerWalServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryApproveWithNullPayerWalServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalAndWalletWithNullPayeeWalServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryApproveWithNullPayeeWalServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalAndWalletWithNullInitiatorWalServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryApproveWithNullInitiatorWalServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalAndWalletWithNullPayerBankServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryApproveWithNullPayerBankServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalAndWalletWithNullPayeeBankServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryApproveWithNullPayeeBankServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testUpdateCategoriesApprovalAndWalletWithNullInitiatorServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.updateCategoryApproveWithNullInitiatorBankServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesApprovalAndWalletWithNullPayerWalServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryApproveWithNullPayerWalServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesApprovalAndWalletWithNullPayeeWalServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryApproveWithNullPayeeWalServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesApprovalAndWalletWithNullInitiatorWalServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryApproveWithNullInitiatorWalServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesApprovalAndWalletWithNullPayerBankServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryApproveWithNullPayerBankServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesApprovalAndWalletWithNullPayeeBankServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryApproveWithNullPayeeBankServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

    @Test
    public void testAddCategoriesApprovalAndWalletWithNullInitiatorServiceValidationError() throws Exception {
        when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
                .thenReturn(CategoryDataPreparationUtil.getCategoryMaker());

        mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesApprovalUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(CategoryDataPreparationUtil.addCategoryApproveWithNullInitiatorBankServiceRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

	@Test
	public void testGetCategoryByDomainCatCodeWithNullCatCodeValidationError() throws Exception {
		when(categoryCheckerRepository.getCategoryByDomainCatCode(Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString())).thenReturn(null);

		mockMvc.perform(MockMvcRequestBuilders
				.get(CategoryDataPreparationUtil.getCategoryByDomainCatCodeServiceWithNullCatCodeUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.getCategoryByDomainCatCodeServiceRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetCategoryByDomainCatCodeWithNullDomainCodeValidationError() throws Exception {
		when(categoryCheckerRepository.getCategoryByDomainCatCode(Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString())).thenReturn(null);

		mockMvc.perform(MockMvcRequestBuilders
				.get(CategoryDataPreparationUtil.getCategoryByDomainCatCodeServiceWithNullDomainCodeUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.getCategoryByDomainCatCodeServiceRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetWalletAndBankServicesWithNullDomainCodeValidationError() throws Exception {

		mockMvc.perform(
				MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getWalletAndBankServicesWithNullDoaminCodeUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
						.content(CategoryDataPreparationUtil.getWalletAndBankServicesRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
    public void testGetAllCategoriesInitiatedSatusNull() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getAllCategoriesInitiatedSatusNullUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
	
	@Test
    public void testGetAllCategoriesInitiatedSatusNoYesOrNo() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getAllCategoriesInitiatedSatusNoYesOrNoUrl())
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

	@Test
	public void testDeleteCategoriesApproveWithNullcategoryCodeValidationError() throws Exception {

		mockMvc.perform(
				MockMvcRequestBuilders.delete(CategoryDataPreparationUtil.deleteCategoriesApproveWithNullCatCodeUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
						.content(CategoryDataPreparationUtil.deleteCategoryApproveRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testDeleteCategoriesApproveWithNullActionValidationError() throws Exception {

		mockMvc.perform(
				MockMvcRequestBuilders.delete(CategoryDataPreparationUtil.deleteCategoriesApproveWithNullActionUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
						.content(CategoryDataPreparationUtil.deleteCategoryApproveRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetSingleCategoryWithNullCatCode() throws Exception {

		mockMvc.perform(MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getSingleCategoryWithNullCatCodeUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetSingleCategoryWithNullInitiatedType() throws Exception {

		mockMvc.perform(
				MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getSingleCategoryWithNullInitiatedTypeUrl())
						.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetSingleCategoryWithInvalidInitiatedType() throws Exception {

		mockMvc.perform(
				MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getSingleCategoryWithInvalidInitiatedTypeUrl())
						.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
	public void testGetSingleCategoryWithYesInitiatedType() throws Exception {

		mockMvc.perform(
				MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getSingleCategoryWithInvalidInitiatedTypeUrl())
						.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetCategoryByDomainCodeWithNullDomainCodeValidationError() throws Exception {

		mockMvc.perform(MockMvcRequestBuilders
				.get(CategoryDataPreparationUtil.getCategoryByDomainCodeServiceWithNullDomainCodeUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.getCategoryByDomainCodeServiceRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testDeleteCategoriesApproveCategoryMakerValidationError() throws Exception {
		when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString())).thenReturn(null);
		mockMvc.perform(MockMvcRequestBuilders.delete(CategoryDataPreparationUtil.deleteCategoriesApproveActionUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.deleteCategoryApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

}
