/** 
 * COPYRIGHT: Comviva Technologies Pvt. Ltd.
 * This software is the sole property of Comviva
 * and is protected by copyright law and international
 * treaty provisions. Unauthorized reproduction or
 * redistribution of this program, or any portion of
 * it may result in severe civil and criminal penalties
 * and will be prosecuted to the maximum extent possible
 * under the law. Comviva reserves all rights not
 * expressly granted. You may not reverse engineer, decompile,
 * or disassemble the software, except and only to the
 * extent that such activity is expressly permitted
 * by applicable law notwithstanding this limitation.
 * THIS SOFTWARE IS PROVIDED TO YOU "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 * YOU ASSUME THE ENTIRE RISK AS TO THE ACCURACY
 * AND THE USE OF THIS SOFTWARE. Comviva SHALL NOT BE LIABLE FOR
 * ANY DAMAGES WHATSOEVER ARISING OUT OF THE USE OF OR INABILITY TO
 * USE THIS SOFTWARE, EVEN IF Comviva HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/
package com.comviva.mfs.service.grouprole;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.GroupRoleChecker;
import com.comviva.mfs.entity.GroupRoleMaker;
import com.comviva.mfs.entity.SysGroupRoleChecker;
import com.comviva.mfs.entity.SysGroupRoleMaker;
import com.comviva.mfs.model.grouprole.ServiceRole;
import com.comviva.mfs.model.grouprole.UpdateGroupRoleInitiateRequest;
import com.comviva.mfs.model.grouprole.UpdateGroupRoleInitiateResponse;
import com.comviva.mfs.repository.GroupRoleCheckerRepository;
import com.comviva.mfs.repository.GroupRoleMakerRepository;
import com.comviva.mfs.repository.SysGroupRoleCheckerRepository;
import com.comviva.mfs.repository.SysGroupRoleMakerRepository;
import com.comviva.mfs.repository.SysMessagesRepository;
import com.comviva.mfs.service.CommonService;

/**
 * This service used for Update GroupRole Initiate
 * 
 * @author sudharshans
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class UpdateGroupRoleInitiateService extends CommonService {

    private String groupRoleCode;
    private SysGroupRoleMaker sysGroupRoleMaker;
    private SysGroupRoleChecker sysGroupRoleChecker;
    private GroupRoleMakerRepository groupRoleMakerRepository;
    private GroupRoleCheckerRepository groupRoleCheckerRepository;
    private SysGroupRoleMakerRepository sysGroupRoleMakerRepository;
    private SysGroupRoleCheckerRepository sysGroupRoleCheckerRepository;
    private UpdateGroupRoleInitiateRequest updateGroupRoleRequest;
    private List<GroupRoleMaker> groupRoleMakerList;
    private List<GroupRoleChecker> groupRoleCheckerList;

    @Autowired
    private KafkaTemplate<String, Object> kafkaTemplate;

    /**
     * Construct UpdateGroupRoleInitiateService
     * 
     * @param sysMessagesRepository
     *            - sysMessagesRepository
     * @param groupRoleMakerRepository
     *            - groupRoleMakerRepository
     * @param groupRoleCheckerRepository
     *            - groupRoleCheckerRepository
     * @param sysGroupRoleMakerRepository
     *            - sysGroupRoleMakerRepository
     * @param sysGroupRoleCheckerRepository
     *            - sysGroupRoleCheckerRepository
     */
    @Autowired
    public UpdateGroupRoleInitiateService(SysMessagesRepository sysMessagesRepository,
            GroupRoleMakerRepository groupRoleMakerRepository, GroupRoleCheckerRepository groupRoleCheckerRepository,
            SysGroupRoleMakerRepository sysGroupRoleMakerRepository,
            SysGroupRoleCheckerRepository sysGroupRoleCheckerRepository) {
        this.sysMessagesRepository = sysMessagesRepository;
        this.groupRoleMakerRepository = groupRoleMakerRepository;
        this.groupRoleCheckerRepository = groupRoleCheckerRepository;
        this.sysGroupRoleMakerRepository = sysGroupRoleMakerRepository;
        this.sysGroupRoleCheckerRepository = sysGroupRoleCheckerRepository;
    }

    /**
     * Update GroupRoleInitiate
     * 
     * @param groupRoleCode - String
     * @param updateGroupRoleRequest - updateGroupRoleRequest
     * @return UpdateGroupRoleInitiateResponse
     */
    @Transactional
    public UpdateGroupRoleInitiateResponse execute(String groupRoleCode,
            UpdateGroupRoleInitiateRequest updateGroupRoleRequest) {
        Map<String, Object> constructAdminMap = new HashMap<>();
        List<String> params = new ArrayList<>();
        groupRoleMakerList = new ArrayList<>();
        groupRoleCheckerList = new ArrayList<>();
        String isApprovalRequired;
        this.groupRoleCode = groupRoleCode;
        this.updateGroupRoleRequest = updateGroupRoleRequest;
        serviceRoleCode = ServiceRoleCodes.GROUP_ROLE_CURD_ROLE.getStrValue();
        super.initiate(updateGroupRoleRequest, serviceRoleCode);
        isApprovalRequired = updateGroupRoleRequest.getIsApprovalRequired();
        validateInputs();
        sysGroupRoleMaker = new SysGroupRoleMaker();
        copyObjects(sysGroupRoleMaker, sysGroupRoleChecker);
        if (null != isApprovalRequired && Constants.ACTIVE_STATUS.getStrValue().equals(isApprovalRequired)) {
            constructAdminMap.put("oldObject", sysGroupRoleChecker);
            saveSysGroupRoleMaker();
            params.add(sysGroupRoleMaker.getGroupRoleName());
            constructAdminMap.put("newObject", sysGroupRoleMaker);
            responseMessageCode = MessageCodes.GROUP_ROLE_UPDATE_INIT_SUCCESS.getStrValue();
        } else {
            constructAdminMap.put("oldObject", sysGroupRoleChecker);
            saveSysGroupRoleChecker();
            params.add(sysGroupRoleChecker.getGroupRoleName());
            constructAdminMap.put("newObject", sysGroupRoleChecker);
            responseMessageCode = MessageCodes.GROUP_ROLE_UPDATE_APPR_SUCCESS.getStrValue();
        }
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        createRequestResponseHistObject();
        createAuditLogMap(constructAdminMap);
        generateReponseMessage(params);
        return createResponse();
    }

    /**
     * Validate the request parameters
     */
    @Override
    public void validateInputs() {
        if (CommonUtils.isNullorEmpty(groupRoleCode)) {
            throw new ValidationException(Constants.GROUP_ROLE_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isAlphaNumericAndLenghtCheck(groupRoleCode, groupRoleCode.length(),
                Constants.GROUPROLE_CODE_LENGTH.getIntValue())) {
            throw new ValidationException(Constants.GROUP_ROLE_CODE.getStrValue(),
                    MessageCodes.FIELD_ALPHANUMERIC.getStrValue());
        }

        if (updateGroupRoleRequest.getAllServiceList() == null) {
            throw new ValidationException(Constants.SERVICE_LIST.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else {
            for (ServiceRole serviceRole : updateGroupRoleRequest.getAllServiceList()) {
                if (CommonUtils.isNullorEmpty(serviceRole.getServiceName())) {
                    throw new ValidationException(Constants.SERVIE_NAME.getStrValue(),
                            MessageCodes.FIELD_MANDATORY.getStrValue());
                } else if (CommonUtils.isNullorEmpty(serviceRole.getServiceType())) {
                    throw new ValidationException(Constants.SERVICE_TYPE.getStrValue(),
                            MessageCodes.FIELD_MANDATORY.getStrValue());
                } else if (CommonUtils.isNullorEmpty(serviceRole.getServiceStatus())) {
                    throw new ValidationException(Constants.SERVICE_STATUS.getStrValue(),
                            MessageCodes.FIELD_MANDATORY.getStrValue());
                }
            }

        }

        sysGroupRoleChecker = sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(groupRoleCode);
        if (sysGroupRoleChecker == null) {
            throw new ValidationException(groupRoleCode, MessageCodes.GROUP_ROLE_CODE_NOT_FOUND.getStrValue());
        }

        sysGroupRoleMaker = sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(groupRoleCode);
        if (sysGroupRoleMaker != null) {
            throw new ValidationException(groupRoleCode, MessageCodes.UNDER_APPROVAL.getStrValue());
        }

    }

    private void saveSysGroupRoleMaker() {
        GroupRoleMaker groupRoleMaker;
        sysGroupRoleMaker.setStatus(Constants.UPDATE_INITIATE_STATUS.getStrValue());
        sysGroupRoleMakerRepository.save(sysGroupRoleMaker);
        for (ServiceRole serviceRole : updateGroupRoleRequest.getAllServiceList()) {
            if (serviceRole.getServiceStatus().equalsIgnoreCase(Constants.ACTIVE_STATUS.getStrValue())) {
                groupRoleMaker = new GroupRoleMaker();
                groupRoleMaker.setGroupRoleCode(groupRoleCode);
                groupRoleMaker.setRoleCode(serviceRole.getServiceType());
                if (sysGroupRoleMaker.getGroupRoleType().equals(Constants.WEB.getStrValue())) {
                    groupRoleMaker.setServicePymtId(0L);
                } else {
                    groupRoleMaker.setServicePymtId(Long.valueOf(serviceRole.getServiceType()));
                }
                groupRoleMakerList.add(groupRoleMaker);
            }
        }
        groupRoleMakerRepository.saveAll(groupRoleMakerList);

    }

    private void saveSysGroupRoleChecker() {
        SysGroupRoleChecker sysGroupRoleCheckerSaved = sysGroupRoleCheckerRepository.save(sysGroupRoleChecker);
        kafkaTemplate.send("sysGroupRoleChecker", sysGroupRoleCheckerSaved);
        // groupRoleChecker data saving
        GroupRoleChecker groupRoleChecker;
        for (ServiceRole serviceRole : updateGroupRoleRequest.getAllServiceList()) {
            if (serviceRole.getServiceStatus().equalsIgnoreCase(Constants.ACTIVE_STATUS.getStrValue())) {
                groupRoleChecker = new GroupRoleChecker();
                groupRoleChecker.setGroupRoleCode(groupRoleCode);
                groupRoleChecker.setRoleCode(serviceRole.getServiceType());
                if (sysGroupRoleChecker.getGroupRoleType().equals(Constants.WEB.getStrValue())) {
                    groupRoleChecker.setServicePymtId(0L);
                } else {
                    groupRoleChecker.setServicePymtId(Long.valueOf(serviceRole.getServiceType()));
                }
                groupRoleCheckerList.add(groupRoleChecker);
            }
        }
        List<GroupRoleChecker> groupRoleCheckersSaved = groupRoleCheckerRepository.saveAll(groupRoleCheckerList);
        if (CommonUtils.isNullorEmpty(groupRoleCheckersSaved)) {
            groupRoleCheckersSaved = new ArrayList<>();
        }
        for (GroupRoleChecker grpRoleChecker : groupRoleCheckersSaved) {
            kafkaTemplate.send("groupRoleChecker", grpRoleChecker);
        }

    }

    /**
     * Construct the UpdateGroupRoleInitiateResponse
     * 
     * @return UpdateGroupRoleInitiateResponse
     */
    @Override
    public UpdateGroupRoleInitiateResponse createResponse() {
        UpdateGroupRoleInitiateResponse updateGroupRoleInitiateResponse = new UpdateGroupRoleInitiateResponse();
        updateGroupRoleInitiateResponse.setStatus(responseStatus);
        updateGroupRoleInitiateResponse.setExternalRefId(updateGroupRoleRequest.getExternalRefId());
        updateGroupRoleInitiateResponse.setReferenceId(referenceId);
        updateGroupRoleInitiateResponse.setMessage(responseMessage);
        return updateGroupRoleInitiateResponse;
    }

}
