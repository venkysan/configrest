package com.comviva.mfs.controller.test;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.comviva.mfs.common.ErrorCodes;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.constant.test.TestBaseConstants;
import com.comviva.mfs.datadrive.test.CategoryDataPreparationUtil;
import com.comviva.mfs.datadrive.test.DomainDataPreparationUtil;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.DomainCheckerRepository;
import com.comviva.mfs.repository.DomainMakerRepository;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class DomainControllerValidationTest {

	private MockMvc mockMvc;
	@Autowired
	private WebApplicationContext wac;
	@MockBean
	private DomainCheckerRepository domainCheckerRepository;
	@MockBean
	private DomainMakerRepository domainMakerRepository;
	@MockBean
	private CategoryCheckerRepository categoryCheckerRepository;

	@Before
	public void setup() {
		this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
	}

	@Test
	public void testAddDomainInitiateDomainCodeEmptyValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainInitiateDomainCodeEmptyRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainInitiateDomainCodeAlphaNumericValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainInitiateDomainCodeAlphaNumericRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainInitiateDomainNameEmptyValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainInitiateDomainNameEmptyRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainInitiateDomainNameAlphaNumericValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainInitiateDomainNameAlphaNumericRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainInitiateNumberofcatEmptyValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainInitiateNumOfCatEmptyRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainInitiateNumOfCatAlphaNumericValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainInitiateNumOfCatAlphaNumericRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainInitiateDomainMakerNotNullValidationError() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMaker());
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainInitiateDomainNameAlphaNumericRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainInitiateDomainCheckerNotNullValidationError() throws Exception {
		when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainChecker());
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainInitiateDomainNameAlphaNumericRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainInitiateDomainMakerNotNull() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMaker());
		when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainChecker());
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainInitiateRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
    public void testAddDomainInitiateIsApprovalRequiredEmptyCase() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(DomainDataPreparationUtil.addDomainInitiateIsApprovalRequiredEmptyRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
	
	@Test
    public void testAddDomainInitiateIsApprovalRequiredCheckYesorNo() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(DomainDataPreparationUtil.addDomainInitiateIsApprovalRequiredNotYesOrNoRequest()))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
	
	@Test
	public void testAddDomainApprovalDomainMakerEmptyValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainApprovalDomainCodeEmptyValidationError() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMaker());
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainApprovalDomainCodeNullUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainApprovalDomainCodeisAlphaNumericAndLenghtCheckValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders
				.post(DomainDataPreparationUtil.addDomainApprovalDomainCodeisAlphaNumericAndLenghtCheckUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainInitiateDomainCodeEmptyValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainInitiateDomainCodeNullUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainInitiateRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
    public void testUpdateDomainInitiateIsApprovalRequiredEmpty() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(DomainDataPreparationUtil.updateDomainInitiateIsApprovalRequiredEmptyRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
	
	@Test
    public void testUpdateDomainInitiateIsApprovalRequiredNotYesOrNo() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(DomainDataPreparationUtil.updateDomainInitiateIsApprovalRequiredNotYesNoRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

	@Test
	public void testUpdateDomainInitiateDomainNameEmptyValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainInitiateDomainNameEmptyRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainInitiateDomainNameAlphaNumericValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainInitiateDomainNameAlphaNumericRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainInitiateDomainNameLengthValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainInitiateDomainNameMorethanlengthRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainInitiateNumOfcatZeroValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainInitiateNumOfCatZeroRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainInitiateNumOfcatNotValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainInitiateNumOfCatNotvalidRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainInitiateDomainCheckerEmpty() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainInitiateRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainInitiateDomainMakerNotNull() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMaker());
		when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainChecker());
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainInitiateRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainApprovalDomainMakerNullValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainApprovalActionReject() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMaker());
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainRejectUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainApprovalDomainCodeNullValidationError() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMaker());
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainApprovalDomainCodeNullUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainApprovalActionNullValidationError() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMaker());
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainApprovalActionNullUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));

	}

	@Test
	public void testDeleteDomainInitiateDomainCheckerValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.deleteDomainInitiateRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testDeleteDomainInitiateDomainMakerValidationError() throws Exception {
		when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainChecker());
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMaker());
		mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.deleteDomainInitiateRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testDeleteDomainInitiateDomainCodeValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainInitiateDomainCodeNullUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.deleteDomainInitiateRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
    public void testDeleteDomainInitiateIsApprovalRequiredEmpty() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(DomainDataPreparationUtil.deleteDomainInitiateIsApprovalRequiredEmpty())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }
	
	@Test
    public void testDeleteDomainInitiateIsApprovalRequiredNotYesOrNo() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainInitiateUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
                .content(DomainDataPreparationUtil.deleteDomainInitiateIsApprovalRequiredNotYesOrNoRequest())).andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
    }

	@Test
	public void testDeleteDomainApprovalDomainCodeValidationError() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMakerForApprove());
		when(categoryCheckerRepository.findCategoryListByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getAllCategoryCheckers());
		mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.deleteDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testDeleteDomainApprovalDomainMakerValidationError() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMakerForDelete());
		when(categoryCheckerRepository.findCategoryListByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getAllCategoryCheckers());
		mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.deleteDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetAllDomainsInitiateStatusNullValidationError() throws Exception {
		when(domainCheckerRepository.getAllActiveDomains(Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomains());
		mockMvc.perform(MockMvcRequestBuilders.get(DomainDataPreparationUtil.getAllDomainsInitiateStatusNullUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetAllDomainsInitiateStatusCheckYesOrNoValidationError() throws Exception {
		when(domainCheckerRepository.getAllActiveDomains(Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomains());
		mockMvc.perform(
				MockMvcRequestBuilders.get(DomainDataPreparationUtil.getAllDomainsInitiateStatusCheckYesOrNoUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetSingleDomainsInitiateStatusNullValidationError() throws Exception {
		when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainChecker());
		mockMvc.perform(MockMvcRequestBuilders.get(DomainDataPreparationUtil.getSingleDomainInitiateStatusNullUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetSingleDomainsInitiateStatusCheckYesOrNoValidationError() throws Exception {
		when(domainCheckerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainChecker());
		mockMvc.perform(
				MockMvcRequestBuilders.get(DomainDataPreparationUtil.getSingleDomainInitiateStatusCheckYesOrNoUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
	public void testGetDomainsByAppCodeInitiateStatusNull() throws Exception {
		
		mockMvc.perform(MockMvcRequestBuilders.get(DomainDataPreparationUtil.getDomainsByAppCodeInitiateStatusNullUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
	public void testGetDomainsByAppCodeInitiateStatusNoYeOrNoTest() throws Exception {
		
		mockMvc.perform(MockMvcRequestBuilders.get(DomainDataPreparationUtil.getDomainsByAppCodeInitiateStatusNoYeOrNoUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
	public void testGetDomainsByAppCodeNullCase() throws Exception {
		
		mockMvc.perform(MockMvcRequestBuilders.get(DomainDataPreparationUtil.getDomainsByAppCodeAppCodeNullCaseUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainApprovalWithNullStatusValidationError() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainMakerForNullApprove());

		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testUpdateDomainApprovalActionRejectMsg() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(DomainDataPreparationUtil.getDomainApprovalDomainMaker());

		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainRejectUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testGetDomainsByAppCodeWithNullMakerRecords() throws Exception {
		when(domainMakerRepository.getDomainByAppCode(Mockito.anyString())).thenReturn(null);

		mockMvc.perform(MockMvcRequestBuilders.get(DomainDataPreparationUtil.getDomainsByAppCodeUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(MessageCodes.NO_RECORDS_FOUND.getStrValue()));
	}

	@Test
	public void testGetDomainsByAppCodeWithNullCheckerRecords() throws Exception {
		when(domainCheckerRepository.getDomainByAppCode(Mockito.anyString(), Mockito.anyString())).thenReturn(null);

		mockMvc.perform(MockMvcRequestBuilders.get(DomainDataPreparationUtil.getDomainsByAppCodeNOUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(MessageCodes.NO_RECORDS_FOUND.getStrValue()));
	}

	@Test
	public void testDeleteDomainInitiateWithResultEmptyCheckerValidationError() throws Exception {
		when(categoryCheckerRepository.findCategoryListByDomainCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(null);

		mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.deleteDomainInitiateRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testDeleteDomainApproveWithResultEmptyMakerValidationError() throws Exception {
		when(domainMakerRepository.getDomainByDomainCode(Mockito.anyString(), Mockito.anyString())).thenReturn(null);
		mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.deleteDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}

	@Test
	public void testAddDomainApprovalWithInvalidActionValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(DomainDataPreparationUtil.addDomainApprovalWithInvalidUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.addDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
	public void testUpdateDomainApprovalWithInvalidActionValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.put(DomainDataPreparationUtil.updateDomainApprovalWithInvalidActionUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.updateDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
	public void testDeleteDomainApprovalWithInvalidActionValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainApprovalWithInvalidActionUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.deleteDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
	public void testDeleteDomainApprovalWithNullActionValidationError() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.delete(DomainDataPreparationUtil.deleteDomainApprovalWithNullActionUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(DomainDataPreparationUtil.deleteDomainApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.VALIDATION_ERROR_VAL.getValue()));
	}
	
	@Test
    public void testGetDomainsByAppCodeDomainMakersEmpty() throws Exception {
        when(domainMakerRepository.getDomainByAppCode(Mockito.anyString()))
                .thenReturn(null);
        mockMvc.perform(MockMvcRequestBuilders.get(DomainDataPreparationUtil.getSingleDomainUrl())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
                        .value(MessageCodes.NO_RECORDS_FOUND.getStrValue()));
    }
	
}
