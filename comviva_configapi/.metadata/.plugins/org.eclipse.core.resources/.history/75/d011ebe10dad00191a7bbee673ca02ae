/** 
 * COPYRIGHT: Comviva Technologies Pvt. Ltd.
 * This software is the sole property of Comviva
 * and is protected by copyright law and international
 * treaty provisions. Unauthorized reproduction or
 * redistribution of this program, or any portion of
 * it may result in severe civil and criminal penalties
 * and will be prosecuted to the maximum extent possible
 * under the law. Comviva reserves all rights not
 * expressly granted. You may not reverse engineer, decompile,
 * or disassemble the software, except and only to the
 * extent that such activity is expressly permitted
 * by applicable law notwithstanding this limitation.
 * THIS SOFTWARE IS PROVIDED TO YOU "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 * YOU ASSUME THE ENTIRE RISK AS TO THE ACCURACY
 * AND THE USE OF THIS SOFTWARE. Comviva SHALL NOT BE LIABLE FOR
 * ANY DAMAGES WHATSOEVER ARISING OUT OF THE USE OF OR INABILITY TO
 * USE THIS SOFTWARE, EVEN IF Comviva HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/
package com.comviva.mfs.service.domain;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.ErrorCodes;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.DomainChecker;
import com.comviva.mfs.entity.DomainMaker;
import com.comviva.mfs.model.domain.AddDomainInitiateRequest;
import com.comviva.mfs.model.domain.AddDomainInitiateResponse;
import com.comviva.mfs.repository.DomainCheckerRepository;
import com.comviva.mfs.repository.DomainMakerRepository;
import com.comviva.mfs.service.CommonService;

/**
 * This service used for Add Domain Initiate
 * 
 * @author sudharshans
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class AddDomainInitiateService extends CommonService {

    private DomainMaker domainMaker;
    private DomainChecker domainChecker;
    private DomainMakerRepository domainMakerRepository;
    private DomainCheckerRepository domainCheckerRepository;
    private AddDomainInitiateRequest addDomainInitiateRequest;

    @Autowired
    private KafkaTemplate<String, Object> kafkaTemplate;

    /**
     * Construct AddDomainInitiateService
     * 
     * @param domainMakerRepository
     *            - domainMakerRepository
     * @param domainCheckerRepository
     *            - domainCheckerRepository
     */
    @Autowired
    public AddDomainInitiateService(DomainMakerRepository domainMakerRepository,
            DomainCheckerRepository domainCheckerRepository) {
        this.domainMakerRepository = domainMakerRepository;
        this.domainCheckerRepository = domainCheckerRepository;
    }

    /**
     * Add DomainInitiate
     * 
     * @param addDomainInitiateRequest - addDomainInitiateRequest
     * @return AddDomainInitiateResponse
     */
    public AddDomainInitiateResponse execute(AddDomainInitiateRequest addDomainInitiateRequest) {
        Map<String, Object> constructAdminMap = new HashMap<>();
        List<String> params = new ArrayList<>();
        String isApprovalRequired;
        this.addDomainInitiateRequest = addDomainInitiateRequest;
        serviceRoleCode = ServiceRoleCodes.ADD_DOMAIN_INIT_ROLE.getStrValue();
        super.initiate(addDomainInitiateRequest, serviceRoleCode);
        isApprovalRequired = addDomainInitiateRequest.getIsApprovalRequired();
        validateInputs();
        if (null != isApprovalRequired && Constants.ACTIVE_STATUS.getStrValue().equals(isApprovalRequired)) {
            populateDomainMakerDetials();
            domainMakerRepository.save(domainMaker);
            params.add(domainMaker.getDomainName());
            constructAdminMap.put(NEW_OBJECT, domainMaker);
            responseMessageCode = MessageCodes.DOMAIN_ADD_INIT_SUCCESS.getStrValue();
        } else {
            populateDomainCheckerDetials();
            domainCheckerRepository.save(domainChecker);
            params.add(domainChecker.getDomainName());
            constructAdminMap.put(NEW_OBJECT, domainChecker);
            responseMessageCode = MessageCodes.DOMAIN_APPROVE_SUCCESS.getStrValue();
            kafkaTemplate.send("domainChecker", domainChecker);
        }
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        generateReponseMessage(params);
        createRequestResponseHistObject();
        constructAdminMap.put(NEW_OBJECT, domainMaker);
        createAuditLogMap(constructAdminMap);
        return createResponse();
    }

    private void populateDomainMakerDetials() {
        domainMaker = new DomainMaker();
        domainMaker.setDomainCode(addDomainInitiateRequest.getDomainCode());
        domainMaker.setDomainName(addDomainInitiateRequest.getDomainName());
        domainMaker.setDomainTypeCode("DISTB_CHAN");
        domainMaker.setApplicationCode(Constants.APPLICATION_CODE_VALUE.getStrValue());
        domainMaker.setStatus(Constants.ADD_INITIATE_STATUS.getStrValue());
        domainMaker.setNumOfCat(Integer.parseInt(addDomainInitiateRequest.getNumOfCat()));
        domainMaker.setDomainSeqNo(Constants.DOMAIN_SEQNO_VALUE.getIntValue());
    }

    private void populateDomainCheckerDetials() {
        domainChecker = new DomainChecker();
        domainChecker.setDomainCode(addDomainInitiateRequest.getDomainCode());
        domainChecker.setDomainName(addDomainInitiateRequest.getDomainName());
        domainChecker.setDomainTypeCode("DISTB_CHAN");
        domainChecker.setApplicationCode("2");
        domainChecker.setStatus(Constants.ACTIVE_STATUS.getStrValue());
        domainChecker.setNumOfCat(Integer.parseInt(addDomainInitiateRequest.getNumOfCat()));
        domainChecker.setDomainSeqNo(Constants.DOMAIN_SEQNO_VALUE.getIntValue());
    }

    /**
     * Validate the request parameters
     */
    @Override
    public void validateInputs() {
        domainCodeAndNameCheck();
        if (null != domainCheckerRepository.getDomainByDomainCode(Constants.YES.getStrValue(),
                addDomainInitiateRequest.getDomainCode())
                || null != domainMakerRepository.getDomainByDomainCode(Constants.ADD_INITIATE_STATUS.getStrValue(),
                        addDomainInitiateRequest.getDomainCode())) {
            throw new ValidationException(addDomainInitiateRequest.getDomainCode(),
                    MessageCodes.DOMAIN_CODE_ALREADY_EXISTS.getStrValue());
        } else if (!CommonUtils.isNullorEmpty(domainCheckerRepository.getDomainByDomainName(Constants.YES.getStrValue(),
                addDomainInitiateRequest.getDomainName()))
                || !CommonUtils.isNullorEmpty(domainMakerRepository.getDomainByDomainName(Constants.YES.getStrValue(),
                        addDomainInitiateRequest.getDomainName()))) {
            throw new ValidationException(addDomainInitiateRequest.getDomainName(),
                    ErrorCodes.DOMAIN_NAME_NOT_UNIQUE.getErrorCode());
        }
    }

    private void domainCodeAndNameCheck() {
        if (CommonUtils.isNullorEmpty(addDomainInitiateRequest.getDomainCode())) {
            throw new ValidationException(Constants.DOMAIN_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isAlphaNumericAndLenghtCheck(addDomainInitiateRequest.getDomainCode(),
                addDomainInitiateRequest.getDomainCode().length(), Constants.DOMAIN_CODE_LENGTH.getIntValue())) {
            throw new ValidationException(Constants.DOMAIN_CODE.getStrValue(),
                    MessageCodes.FIELD_ALPHANUMERIC.getStrValue());
        } else if (CommonUtils.isNullorEmpty(addDomainInitiateRequest.getDomainName())) {
            throw new ValidationException(Constants.DOMAIN_NAME.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!domainNameSpicealCharCheck(addDomainInitiateRequest.getDomainName())) {
            throw new ValidationException(Constants.DOMAIN_NAME.getStrValue(),
                    MessageCodes.FIELD_ALPHANUMERIC.getStrValue());
        } else if (CommonUtils.isNullorEmpty(addDomainInitiateRequest.getNumOfCat())) {
            throw new ValidationException(Constants.NUMBER_OF_CAT.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isAlphaNumericAndLenghtCheck(addDomainInitiateRequest.getNumOfCat(),
                addDomainInitiateRequest.getNumOfCat().length(), Constants.NUMBER_OF_CAT_LENGTH.getIntValue())) {
            throw new ValidationException(Constants.NUMBER_OF_CAT.getStrValue(),
                    MessageCodes.FIELD_ALPHANUMERIC.getStrValue());
        } else if (CommonUtils.isNullorEmpty(addDomainInitiateRequest.getIsApprovalRequired())) {
            throw new ValidationException(Constants.IS_APPROVE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isApprovalRequired(addDomainInitiateRequest.getIsApprovalRequired())) {
            throw new ValidationException(Constants.IS_APPROVE.getStrValue(),
                    MessageCodes.FIELD_INVALID.getStrValue());
        }
    }

    /**
     * Construct the AddDomainInitiateResponse
     * 
     * @return AddDomainInitiateResponse
     */
    @Override
    public AddDomainInitiateResponse createResponse() {
        AddDomainInitiateResponse addDomainResponse = new AddDomainInitiateResponse();
        addDomainResponse.setStatus(responseStatus);
        addDomainResponse.setExternalRefId(addDomainInitiateRequest.getExternalRefId());
        addDomainResponse.setReferenceId(referenceId);
        addDomainResponse.setMessage(responseMessage);
        return addDomainResponse;
    }

}
