package com.comviva.mfs.controller.test;


import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.comviva.mfs.common.ErrorCodes;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.constant.test.TestBaseConstants;
import com.comviva.mfs.repository.GradeMakerRepository;
import com.comviva.mfs.repository.SysEnumerationRepository;
import com.comviva.mfs.repository.UsersRepository;
import com.comviva.mfs.util.CommonUtilTest;
import com.comviva.mfs.util.GradeDataPreparationUtil;


@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class GradeControllerExceptionTest {

	@LocalServerPort
	private int port;
	@MockBean
	private GradeMakerRepository gradeMakerRepository;
	@MockBean
	private SysEnumerationRepository sysEnumerationRepository;
	@MockBean
	private UsersRepository usersRepository;

	private MockMvc mockMvc;
	@Autowired
	private WebApplicationContext wac;

	@Before
	public void setup() {
		this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
	}

	@Test
	public void testAddGradesInitiateGradeApplicationExceptionCaseWrongBearerCode() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.WRONG_BEARER_CODE.getErrorCode()));
	}

	@Test
	public void testAddGradesInitiateGradeApplicationExceptionCaseWrongBearerCode1() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumerationFailCase());
		mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.WRONG_BEARER_CODE.getErrorCode()));

	}

	@Test
	public void testAddGradesInitiateGradeApplicationExceptionCaseRequesterUserWrong() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());

		mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.REQUESTER_NOT_FOUND.getErrorCode()));

	}

	@Test
	public void addGradesInitiateGradeApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());
		mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.USER_NOT_AUTHORIZED.getErrorCode()));

	}

	@Test
	public void addGradesInitiateGradeExceptionCaseTest() throws Exception {
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());

		mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.addGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));
	}

	@Test
	public void updateGradesInitiateGradeApplicationExceptionCaseWrongBearerCodeTest() throws Exception {

		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.WRONG_BEARER_CODE.getErrorCode()));
	}

	@Test
	public void updateGradesInitiateGradeApplicationExceptionCaseWrongBearerCode1Test() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumerationFailCase());

		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.WRONG_BEARER_CODE.getErrorCode()));
	}

	@Test
	public void updateGradesInitiateGradeApplicationExceptionCaseRequesterUserWrongTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());

		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.REQUESTER_NOT_FOUND.getErrorCode()));

	}

	@Test
	public void updateGradesInitiateGradeApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());

		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.USER_NOT_AUTHORIZED.getErrorCode()));

	}

	@Test
	public void updateGradesInitiateGradeExceptionCaseTest() throws Exception {
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());

		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));
	}

	// DeleteGradeInitiateService -Exceptions Test Cases
	@Test
	public void deleteGradesInitiateGradeApplicationExceptionCaseWrongBearerCodeTest() throws Exception {

		mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.deleteGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.WRONG_BEARER_CODE.getErrorCode()));

	}

	@Test
	public void deleteGradesInitiateGradeApplicationExceptionCaseWrongBearerCode1Test() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumerationFailCase());

		mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.deleteGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.WRONG_BEARER_CODE.getErrorCode()));
	}

	@Test
	public void deleteGradesInitiateGradeApplicationExceptionCaseRequesterUserWrongTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.deleteGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.REQUESTER_NOT_FOUND.getErrorCode()));
	}

	@Test
	public void deleteGradesInitiateGradeApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());

		mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.deleteGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.USER_NOT_AUTHORIZED.getErrorCode()));
	}

	@Test
	public void deleteGradesInitiateGradeExceptionCaseTest() throws Exception {
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());

		mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.deleteGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));
	}

	@Test
	public void getGradesByCodeServiceApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());

		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(MessageCodes.USER_NOT_AUTHORIZED.getStrValue()));

	}

	@Test
	public void getGradesByCodeServiceExceptionCaseTest() throws Exception {
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());

		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));
	}

	@Test
	public void getAllGradeServiceApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());

		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getAllGradesUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(MessageCodes.USER_NOT_AUTHORIZED.getStrValue()));
	}

	@Test
	public void getAllGradeServiceExceptionCaseTest() throws Exception {
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());

		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getAllGradesUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));

	}

	@Test
	public void addGradeApprovalApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());

		mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.addGradeApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(MessageCodes.USER_NOT_AUTHORIZED.getStrValue()));

	}

	@Test
	public void addGradeApprovalExceptionCaseRequesterUserAuthFailTest() throws Exception {
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());

		mockMvc.perform(MockMvcRequestBuilders.post(GradeDataPreparationUtil.addGradeApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.addGradeApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));

	}

	@Test
	public void updateGradeApprovalApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeMaker());
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());

		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(MessageCodes.USER_NOT_AUTHORIZED.getStrValue()));

	}

	@Test
	public void updateGradeApprovalExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeMaker());
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());

		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));

	}

	@Test
	public void deleteGradeApprovalApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeMaker());
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());

		mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.deleteGradeApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(MessageCodes.USER_NOT_AUTHORIZED.getStrValue()));

	}

	@Test
	public void deleteGradeApprovalExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(gradeMakerRepository.getGradeByGradeCode(Mockito.anyString()))
				.thenReturn(GradeDataPreparationUtil.getGradeMaker());
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());
		mockMvc.perform(MockMvcRequestBuilders.delete(GradeDataPreparationUtil.deleteGradeApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.deleteGradeApproveRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));

	}

	@Test
	public void getGradeDetailsByCategoryCodeApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());

		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradesByCategoryCodeUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(MessageCodes.USER_NOT_AUTHORIZED.getStrValue()));

	}

	@Test
	public void getGradeDetailsByCategoryCodeExceptionCaseTest() throws Exception {
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());

		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradesByCategoryCodeUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));

	}

	@Test
	public void getGradeDetailsByGradeCodeApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());

		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(MessageCodes.USER_NOT_AUTHORIZED.getStrValue()));
	}

	@Test
	public void getGradeDetailsByGradeCodeExceptionCaseTest() throws Exception {
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());
		mockMvc.perform(MockMvcRequestBuilders.get(GradeDataPreparationUtil.getGradeByCodeServiceUrl())
				.accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));
	}

	@Test
	public void updateGradeInitiateApplicationExceptionCaseRequesterUserAuthFailTest() throws Exception {
		when(sysEnumerationRepository.getEnumByEnumCode(Mockito.anyString()))
				.thenReturn(CommonUtilTest.getSysEnumeration());
		when(usersRepository.getUserByLoginId(Mockito.anyString())).thenReturn(CommonUtilTest.getUsers());
		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(MessageCodes.USER_NOT_AUTHORIZED.getStrValue()));
	}

	@Test
	public void updateGradeInitiateExceptionCaseTest() throws Exception {
		Mockito.doThrow(new RuntimeException()).when(sysEnumerationRepository).getEnumByEnumCode(Mockito.anyString());

		mockMvc.perform(MockMvcRequestBuilders.put(GradeDataPreparationUtil.updateGradeInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(GradeDataPreparationUtil.updateGradeInitialRequest())).andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(ErrorCodes.GENERIC_ERROR.getErrorCode()));
	}

}