/** 
 * COPYRIGHT: Comviva Technologies Pvt. Ltd.
 * This software is the sole property of Comviva
 * and is protected by copyright law and international
 * treaty provisions. Unauthorized reproduction or
 * redistribution of this program, or any portion of
 * it may result in severe civil and criminal penalties
 * and will be prosecuted to the maximum extent possible
 * under the law. Comviva reserves all rights not
 * expressly granted. You may not reverse engineer, decompile,
 * or disassemble the software, except and only to the
 * extent that such activity is expressly permitted
 * by applicable law notwithstanding this limitation.
 * THIS SOFTWARE IS PROVIDED TO YOU "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 * YOU ASSUME THE ENTIRE RISK AS TO THE ACCURACY
 * AND THE USE OF THIS SOFTWARE. Comviva SHALL NOT BE LIABLE FOR
 * ANY DAMAGES WHATSOEVER ARISING OUT OF THE USE OF OR INABILITY TO
 * USE THIS SOFTWARE, EVEN IF Comviva HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/
package com.comviva.mfs.service.category;

import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.model.BaseRequest;
import com.comviva.mfs.model.category.GetCategoryByDomainCatCodeResponse;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.service.CommonService;

/**
 * This service used for Get Category By DomainCatCode Service
 * 
 * @author sudharshans
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class GetCategoryByDomainCatCodeService extends CommonService {

    private String domainCode;
    private String categoryCode;
    private String identifierType;
    private String identifierValue;
    private String bearerCode;
    private List<CategoryChecker> categoryList;
    private CategoryCheckerRepository categoryCheckerRepository;

    /**
     * Construct GetCategoryByDomainCatCodeService
     * 
     * @param categoryCheckerRepository
     *            - categoryCheckerRepository
     */
    @Autowired
    public GetCategoryByDomainCatCodeService(CategoryCheckerRepository categoryCheckerRepository) {
        this.categoryCheckerRepository = categoryCheckerRepository;
    }

    /**
     * This method used for Get Category By Domain CatCode
     * 
     * @param domainCode - String
     * @param categoryCode - String
     * @param identifierType - String
     * @param identifierValue - String
     * @param bearerCode - String
     * @return GetCategoryByDomainCatCodeResponse
     */
    public GetCategoryByDomainCatCodeResponse execute(String domainCode, String categoryCode, String identifierType,
            String identifierValue, String bearerCode) {
        List<String> params = new ArrayList<>();
        BaseRequest request = new BaseRequest();
        this.domainCode = domainCode;
        this.categoryCode = categoryCode;
        this.identifierType = identifierType;
        this.identifierValue = identifierValue;
        this.bearerCode = bearerCode;
        request.setIdentifierType(identifierType);
        request.setIdentifierValue(identifierValue);
        request.setBearerCode(bearerCode);
        serviceRoleCode = ServiceRoleCodes.VIEW_CATEGORY_ROLE.getStrValue();
        super.initiate(request, serviceRoleCode);
        params.add(domainCode);
        validateInputs();
        categoryList = categoryCheckerRepository.getCategoryByDomainCatCode(domainCode, this.categoryCode,
                Constants.ACTIVE_STATUS.getStrValue());
        if (CommonUtils.isNullorEmpty(categoryList)) {
            responseMessageCode = MessageCodes.NO_RECORDS_FOUND.getStrValue();
        } else {
            responseMessageCode = MessageCodes.SUCCESS.getStrValue();
        }
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        createRequestResponseHistObject();
        generateReponseMessage(params);
        return createResponse();
    }

    /**
     * Construct the GetCategoryByDomainCatCodeResponse
     * 
     * @return GetCategoryByDomainCatCodeResponse
     */
    @Override
    public GetCategoryByDomainCatCodeResponse createResponse() {
        GetCategoryByDomainCatCodeResponse responseObj = new GetCategoryByDomainCatCodeResponse();
        responseObj.setStatus(responseStatus);
        responseObj.setMessage(responseMessage);
        responseObj.setAllCategoryList(categoryList);
        responseObj.setReferenceId(referenceId);
        return responseObj;
    }

    /**
     * Validate the request parameters
     */
    @Override
    public void validateInputs() {
        if (CommonUtils.isNullorEmpty(domainCode)) {
            throw new ValidationException(Constants.DOMAIN_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        if (CommonUtils.isNullorEmpty(this.categoryCode)) {
            throw new ValidationException(Constants.CATEGORY_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        }
    }

}
