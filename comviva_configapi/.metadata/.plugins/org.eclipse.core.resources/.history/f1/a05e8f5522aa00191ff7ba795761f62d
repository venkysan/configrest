package com.comviva.mfs.service.category;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.ApplicationException;
import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.ErrorCodes;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.entity.CategoryMaker;
import com.comviva.mfs.model.BaseRequest;
import com.comviva.mfs.model.category.GetAllCategoryDetailsResponse;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.CategoryMakerRepository;
import com.comviva.mfs.repository.SysMessagesRepository;
import com.comviva.mfs.service.CommonService;

@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class GetAllCategoryService extends CommonService {

    private List<CategoryChecker> categoryCheckers;
    private List<CategoryMaker> categoryMakers;
    private String initiateStatus;
    private CategoryMakerRepository categoryMakerRepository;
    private CategoryCheckerRepository categoryCheckerRepository;

    /**
     * @param sysMessagesRepository
     * @param categoryCheckerRepository
     */
    @Autowired
    public GetAllCategoryService(SysMessagesRepository sysMessagesRepository,
            CategoryCheckerRepository categoryCheckerRepository, CategoryMakerRepository categoryMakerRepository) {
        this.sysMessagesRepository = sysMessagesRepository;
        this.categoryCheckerRepository = categoryCheckerRepository;
        this.categoryMakerRepository = categoryMakerRepository;
    }

    /**
     * Get All Category
     * 
     * @param identifierType
     * @param identifierValue
     * @param bearerCode
     * @return GetAllCategoryDetailsResponse
     */
    public GetAllCategoryDetailsResponse execute(String typeIdent, String valueIdent, String codeBer, String typeInit) {
        List<String> params = new ArrayList<>();
        categoryMakers = new ArrayList<>();
        categoryCheckers = new ArrayList<>();
        inputValidation(typeIdent, valueIdent, codeBer, typeInit);
        this.initiateStatus = typeInit;
        BaseRequest request = new BaseRequest();
        request.setIdentifierType(typeIdent);
        request.setIdentifierValue(valueIdent);
        request.setBearerCode(codeBer);
        serviceRoleCode = ServiceRoleCodes.VIEW_ALL_CATEGORY_ROLE.getStrValue();
        super.initiate(request, serviceRoleCode);
        validateInputs();
        if (initiateStatus.equals(Constants.YES.getStrValue())) {
            copyMakersToCheckers();
        }
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        generateReponseMessage(params);
        return createResponse();
    }

    /**
     * Input validation
     */
    @Override
    public void validateInputs() {

        if (initiateStatus.equals(Constants.YES.getStrValue())) {
            categoryMakers = categoryMakerRepository.findAll();
            if (CommonUtils.isNullorEmpty(categoryMakers)) {
                throw new ApplicationException(MessageCodes.NO_RECORDS_FOUND.getStrValue());
            }
        }
        if (initiateStatus.equals(Constants.NO.getStrValue())) {
            categoryCheckers = categoryCheckerRepository.getAllActiveCategories(Constants.YES.getStrValue());
            if (CommonUtils.isNullorEmpty(categoryCheckers)) {
                throw new ApplicationException(ErrorCodes.NO_ACTIVE_CATEGORY_FOUND.getErrorCode());
            }
        }
    }

    /**
     * Input validation
     * 
     * @param typeIdent
     * @param valueIdent
     * @param codeBer
     * @param typeInit
     * @return
     */
    public Boolean inputValidation(String typeIdent, String valueIdent, String codeBer, String typeInit) {
        Boolean check = false;

        if (CommonUtils.isNullorEmpty(typeInit)) {
            throw new ValidationException(Constants.INITIATE_STATUS.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isYesOrNo(typeInit)) {
            throw new ValidationException(Constants.INITIATE_STATUS.getStrValue(),
                    MessageCodes.FIELD_INVALID.getStrValue());
        } else if (!CommonUtils.isAlphaNumericAndLenghtCheck(valueIdent, valueIdent.length(),
                Constants.IDENTIFIER_VALUE_LENGHT.getIntValue())) {
            throw new ValidationException(Constants.IDENTIFIER_VALUE.getStrValue(),
                    MessageCodes.FIELD_INVALID.getStrValue());
        }
        check = true;
        return check;

    }

    /**
     * Create Response
     * 
     * @return GetAllCategoryDetailsResponse
     */
    @Override
    public GetAllCategoryDetailsResponse createResponse() {
        GetAllCategoryDetailsResponse getAllCategoryDetailsResponse = new GetAllCategoryDetailsResponse();
        getAllCategoryDetailsResponse.setStatus(responseStatus);
        getAllCategoryDetailsResponse.setMessage(responseMessage);
        getAllCategoryDetailsResponse.setAllCategoryList(categoryCheckers);
        getAllCategoryDetailsResponse.setReferenceId(referenceId);
        return getAllCategoryDetailsResponse;
    }

    private void copyMakersToCheckers() {
        CategoryChecker categoryChecker;
        for (CategoryMaker categoryMaker : categoryMakers) {
            categoryChecker = new CategoryChecker();
            copyObjects(categoryChecker, categoryMaker);
            categoryCheckers.add(categoryChecker);
        }
    }

}
