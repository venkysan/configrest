/** 
 * COPYRIGHT: Comviva Technologies Pvt. Ltd.
 * This software is the sole property of Comviva
 * and is protected by copyright law and international
 * treaty provisions. Unauthorized reproduction or
 * redistribution of this program, or any portion of
 * it may result in severe civil and criminal penalties
 * and will be prosecuted to the maximum extent possible
 * under the law. Comviva reserves all rights not
 * expressly granted. You may not reverse engineer, decompile,
 * or disassemble the software, except and only to the
 * extent that such activity is expressly permitted
 * by applicable law notwithstanding this limitation.
 * THIS SOFTWARE IS PROVIDED TO YOU "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 * YOU ASSUME THE ENTIRE RISK AS TO THE ACCURACY
 * AND THE USE OF THIS SOFTWARE. Comviva SHALL NOT BE LIABLE FOR
 * ANY DAMAGES WHATSOEVER ARISING OUT OF THE USE OF OR INABILITY TO
 * USE THIS SOFTWARE, EVEN IF Comviva HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/
package com.comviva.mfs.service.category;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.entity.CategoryMaker;
import com.comviva.mfs.entity.DomainChecker;
import com.comviva.mfs.model.category.AddCategoryInitiateRequest;
import com.comviva.mfs.model.category.AddCategoryInitiateResponse;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.CategoryMakerRepository;
import com.comviva.mfs.repository.DomainCheckerRepository;
import com.comviva.mfs.repository.SysMessagesRepository;
import com.comviva.mfs.service.CommonService;

/**
 * This service used for Add Category Initiate
 * 
 * @author sudharshans
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class AddCategoryInitiateService extends CommonService {

    private CategoryMaker categoryMaker;
    private CategoryChecker categoryChecker;
    private CategoryMakerRepository categoryMakerRepository;
    private CategoryCheckerRepository categoryCheckerRepository;
    private AddCategoryInitiateRequest addCategoryInitiateRequest;

    @Autowired
    private DomainCheckerRepository domainCheckerRepository;

    @Autowired
    private KafkaTemplate<String, Object> kafkaTemplate;

    /**
     * Construct AddCategoryInitiateService with service
     * 
     * @param categoryCheckerRepository
     *            - categoryCheckerRepository
     * @param categoryMakerRepository
     *            - categoryMakerRepository
     * @param sysMessagesRepository
     *            - sysMessagesRepository
     */
    @Autowired
    public AddCategoryInitiateService(CategoryMakerRepository categoryMakerRepository,
            CategoryCheckerRepository categoryCheckerRepository, SysMessagesRepository sysMessagesRepository) {
        this.categoryMakerRepository = categoryMakerRepository;
        this.categoryCheckerRepository = categoryCheckerRepository;
        this.sysMessagesRepository = sysMessagesRepository;
    }

    /**
     * Execution of add category with request parameters
     * 
     * @param addCategoryRequest
     *            - request parameters
     * @return AddCategoryApproveResponse - response with status
     */
    public AddCategoryInitiateResponse execute(AddCategoryInitiateRequest addCategoryRequest) {
        Map<String, Object> constructAdminMap = new HashMap<>();
        String isApprovalRequired;
        List<String> params = new ArrayList<>();
        this.addCategoryInitiateRequest = addCategoryRequest;
        serviceRoleCode = ServiceRoleCodes.ADD_CATEGORY_INIT_ROLE.getStrValue();
        super.initiate(addCategoryRequest, serviceRoleCode);
        isApprovalRequired = addCategoryRequest.getIsApprovalRequired();
        validateInputs();
        if (null != isApprovalRequired && Constants.ACTIVE_STATUS.getStrValue().equals(isApprovalRequired)) {
            populateCatagoryMakerDetials();
            categoryMaker.setStatus(Constants.ADD_INITIATE_STATUS.getStrValue());
            categoryMakerRepository.save(categoryMaker);
            params.add(categoryMaker.getCategoryName());
            constructAdminMap.put(NEW_OBJECT, categoryMaker);
            responseMessageCode = MessageCodes.CATEGORY_ADD_INIT_SUCCESS.getStrValue();
        } else {
            populateCatagoryCheckerDetials();
            categoryChecker.setStatus(Constants.ACTIVE_STATUS.getStrValue());
            categoryCheckerRepository.save(categoryChecker);
            params.add(categoryChecker.getCategoryName());
            constructAdminMap.put(NEW_OBJECT, categoryChecker);
            responseMessageCode = MessageCodes.CATEGORY_ADD_APPR_SUCCESS.getStrValue();
            kafkaTemplate.send("categoryChecker", categoryChecker);
        }
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        createRequestResponseHistObject();
        createAuditLogMap(constructAdminMap);
        generateReponseMessage(params);
        return createResponse();
    }

    private void populateCatagoryMakerDetials() {
        categoryMaker = new CategoryMaker();
        categoryMaker.setCategoryCode(addCategoryInitiateRequest.getCategoryCode());
        categoryMaker.setCategoryName(addCategoryInitiateRequest.getCategoryName());
        categoryMaker.setCategoryType(addCategoryInitiateRequest.getCategoryType());
        categoryMaker.setDomainCode(addCategoryInitiateRequest.getDomainCode());
        categoryMaker.setGrphDomainType(addCategoryInitiateRequest.getGraphDomainType());
        categoryMaker.setParentCategoryCode(addCategoryInitiateRequest.getParentCategoryCode());
        categoryMaker.setAgentAllowed(Constants.NO.getStrValue());
        categoryMaker.setDisplayAllowed(Constants.NO.getStrValue());
        categoryMaker.setFixedProfileAllowed(Constants.NO.getStrValue());
        categoryMaker.setHierarchyAllowed(Constants.NO.getStrValue());
        categoryMaker.setModifiedAllowed(Constants.NO.getStrValue());
        categoryMaker.setMultipleLoginAllowed(Constants.NO.getStrValue());
        categoryMaker.setOutletAllowed(Constants.NO.getStrValue());
        categoryMaker.setProductTypeAllowed(Constants.NO.getStrValue());
        categoryMaker.setRestrictedMsisdnAllowed(Constants.NO.getStrValue());
        categoryMaker.setScheduleTransferAllowed(Constants.NO.getStrValue());
        categoryMaker.setUncontrolTransferAllowed(Constants.NO.getStrValue());
        categoryMaker.setMaxLoginCount(0L);
        categoryMaker.setMaxTxnMsisdn(0L);
    }

    private void populateCatagoryCheckerDetials() {
        categoryChecker = new CategoryChecker();
        categoryChecker.setCategoryCode(addCategoryInitiateRequest.getCategoryCode());
        categoryChecker.setCategoryName(addCategoryInitiateRequest.getCategoryName());
        categoryChecker.setCategoryType(addCategoryInitiateRequest.getCategoryType());
        categoryChecker.setDomainCode(addCategoryInitiateRequest.getDomainCode());
        categoryChecker.setGrphDomainType(addCategoryInitiateRequest.getGraphDomainType());
        categoryChecker.setParentCategoryCode(addCategoryInitiateRequest.getParentCategoryCode());
        categoryChecker.setAgentAllowed(Constants.NO.getStrValue());
        categoryChecker.setDisplayAllowed(Constants.NO.getStrValue());
        categoryChecker.setFixedProfileAllowed(Constants.NO.getStrValue());
        categoryChecker.setHierarchyAllowed(Constants.NO.getStrValue());
        categoryChecker.setModifiedAllowed(Constants.NO.getStrValue());
        categoryChecker.setMultipleLoginAllowed(Constants.NO.getStrValue());
        categoryChecker.setOutletAllowed(Constants.NO.getStrValue());
        categoryChecker.setProductTypeAllowed(Constants.NO.getStrValue());
        categoryChecker.setRestrictedMsisdnAllowed(Constants.NO.getStrValue());
        categoryChecker.setScheduleTransferAllowed(Constants.NO.getStrValue());
        categoryChecker.setUncontrolTransferAllowed(Constants.NO.getStrValue());
        categoryChecker.setMaxLoginCount(0L);
        categoryChecker.setMaxTxnMsisdn(0L);
    }

    /**
     * Input validation
     */
    @Override
    public void validateInputs() {
        
        if (CommonUtils.isNullorEmpty(addCategoryInitiateRequest.getIsApprovalRequired())) {
            throw new ValidationException(Constants.IS_APPROVE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isApprovalRequired(addCategoryInitiateRequest.getIsApprovalRequired())) {
            throw new ValidationException(Constants.IS_APPROVE.getStrValue(),
                    MessageCodes.FIELD_INVALID.getStrValue());
        }
        
        categoryCodeAndNameCheck();
        DomainChecker domainChecker = domainCheckerRepository.getDomainByDomainCode(Constants.YES.getStrValue(),
                addCategoryInitiateRequest.getDomainCode());
        if (domainChecker == null) {
            throw new ValidationException(addCategoryInitiateRequest.getDomainCode(),
                    MessageCodes.DOMAIN_NOT_FOUND.getStrValue());
        }
        categoryMaker = categoryMakerRepository.getCategoryByCategoryCode(addCategoryInitiateRequest.getCategoryCode());
        if (categoryMaker != null
                && categoryMaker.getCategoryCode().equals(addCategoryInitiateRequest.getCategoryCode())) {
            throw new ValidationException(addCategoryInitiateRequest.getCategoryCode(),
                    MessageCodes.UNDER_APPROVAL.getStrValue());
        }
        categoryChecker = categoryCheckerRepository.getCategoryByCategoryCode(Constants.YES.getStrValue(),
                addCategoryInitiateRequest.getCategoryCode());
        if (categoryChecker != null
                && categoryChecker.getCategoryCode().equals(addCategoryInitiateRequest.getCategoryCode())) {
            throw new ValidationException(addCategoryInitiateRequest.getCategoryCode(),
                    MessageCodes.CATEGORY_ALREADY_EXISTS.getStrValue());
        }

        // special check no of category allowed of this domain
        List<CategoryChecker> domainCategoryList = categoryCheckerRepository
                .getCategoryByDomainCode(addCategoryInitiateRequest.getDomainCode(), Constants.YES.getStrValue());
        if (domainCategoryList != null && (domainCategoryList.size() >= domainChecker.getNumOfCat())) {
            throw new ValidationException(addCategoryInitiateRequest.getCategoryCode(),
                    MessageCodes.CATEGORY_CODE_DOMAIN_CODE_LIMIT.getStrValue());
        }
    }

    private void categoryCodeAndNameCheck() {
        if (CommonUtils.isNullorEmpty(addCategoryInitiateRequest.getCategoryCode())) {
            throw new ValidationException(Constants.CATEGORY_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!CommonUtils.isAlphaNumericAndLenghtCheck(addCategoryInitiateRequest.getCategoryCode(),
                addCategoryInitiateRequest.getCategoryCode().length(), Constants.CATEGORY_CODE_LENGTH.getIntValue())) {
            throw new ValidationException(Constants.CATEGORY_CODE.getStrValue(),
                    MessageCodes.FIELD_ALPHANUMERIC.getStrValue());
        } else if (CommonUtils.isNullorEmpty(addCategoryInitiateRequest.getCategoryName())) {
            throw new ValidationException(Constants.CATEGORY_NAME.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        } else if (!domainNameSpicealCharCheck(addCategoryInitiateRequest.getCategoryName())) {
            throw new ValidationException(Constants.CATEGORY_NAME.getStrValue(),
                    MessageCodes.FIELD_ALPHANUMERIC.getStrValue());
        }
    }

    /**
     * Construct for AddCategoryInitiate response
     * 
     * @return AddCategoryInitiateResponse
     */
    public AddCategoryInitiateResponse createResponse() {
        AddCategoryInitiateResponse categoryResponse = new AddCategoryInitiateResponse();
        categoryResponse.setStatus(responseStatus);
        categoryResponse.setExternalRefId(addCategoryInitiateRequest.getExternalRefId());
        categoryResponse.setReferenceId(referenceId);
        categoryResponse.setMessage(responseMessage);
        return categoryResponse;
    }

}
