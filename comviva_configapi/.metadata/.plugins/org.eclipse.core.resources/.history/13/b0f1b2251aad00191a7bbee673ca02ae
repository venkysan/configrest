/** 
 * COPYRIGHT: Comviva Technologies Pvt. Ltd.
 * This software is the sole property of Comviva
 * and is protected by copyright law and international
 * treaty provisions. Unauthorized reproduction or
 * redistribution of this program, or any portion of
 * it may result in severe civil and criminal penalties
 * and will be prosecuted to the maximum extent possible
 * under the law. Comviva reserves all rights not
 * expressly granted. You may not reverse engineer, decompile,
 * or disassemble the software, except and only to the
 * extent that such activity is expressly permitted
 * by applicable law notwithstanding this limitation.
 * THIS SOFTWARE IS PROVIDED TO YOU "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 * YOU ASSUME THE ENTIRE RISK AS TO THE ACCURACY
 * AND THE USE OF THIS SOFTWARE. Comviva SHALL NOT BE LIABLE FOR
 * ANY DAMAGES WHATSOEVER ARISING OUT OF THE USE OF OR INABILITY TO
 * USE THIS SOFTWARE, EVEN IF Comviva HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/
package com.comviva.mfs.service.category;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.entity.CategoryMaker;
import com.comviva.mfs.model.category.UpdateCategoryInitiateRequest;
import com.comviva.mfs.model.category.UpdateCategoryInitiateResponse;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.CategoryMakerRepository;
import com.comviva.mfs.service.CommonService;

/**
 * This service used for Update Category Initiate Service
 * 
 * @author sudharshans
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class UpdateCategoryInitiateService extends CommonService {

    private CategoryMaker categoryMaker;
    private CategoryChecker categoryChecker;
    private CategoryMakerRepository categoryMakerRepository;
    private CategoryCheckerRepository categoryCheckerRepository;
    private UpdateCategoryInitiateRequest updateCategoryRequest;
    private String categoryCode;

    @Autowired
    private KafkaTemplate<String, Object> kafkaTemplate;

    /**
     * Construct UpdateCategoryInitiateService
     * 
     * @param categoryMakerRepository
     *            - categoryMakerRepository
     * @param categoryCheckerRepository
     *            - categoryCheckerRepository
     */
    @Autowired
    public UpdateCategoryInitiateService(CategoryMakerRepository categoryMakerRepository,
            CategoryCheckerRepository categoryCheckerRepository) {
        this.categoryMakerRepository = categoryMakerRepository;
        this.categoryCheckerRepository = categoryCheckerRepository;
    }

    /**
     * Update CategoryInitiate
     * 
     * @param categoryCode
     *            - String
     * @param updateCategoryRequest
     *            - updateCategoryRequest
     * @return UpdateCategoryInitiateResponse
     */
    public UpdateCategoryInitiateResponse execute(String categoryCode,
            UpdateCategoryInitiateRequest updateCategoryRequest) {
        Map<String, Object> constructAdminMap = new HashMap<>();
        List<String> params = new ArrayList<>();
        String isApprovalRequired;
        this.updateCategoryRequest = updateCategoryRequest;
        this.categoryCode = categoryCode;
        serviceRoleCode = ServiceRoleCodes.UPDATE_CATEGORY_INIT_ROLE.getStrValue();
        super.initiate(updateCategoryRequest, serviceRoleCode);
        isApprovalRequired = updateCategoryRequest.getIsApprovalRequired();
        validateInputs();
        categoryMaker = new CategoryMaker();
        copyObjects(categoryMaker, categoryChecker);
        params.add(updateCategoryRequest.getCategoryName());

        if (isApprovalRequired != null && Constants.ACTIVE_STATUS.getStrValue().equals(isApprovalRequired)) {
            constructAdminMap.put(OLD_OBJECT, categoryChecker);
            categoryMaker.setStatus(Constants.UPDATE_INITIATE_STATUS.getStrValue());
            categoryMaker.setCategoryName(updateCategoryRequest.getCategoryName());
            categoryMaker.setParentCategoryCode(updateCategoryRequest.getParentCategoryCode());
            categoryMakerRepository.save(categoryMaker);
            constructAdminMap.put(NEW_OBJECT, categoryMaker);
            responseMessageCode = MessageCodes.CATEGORY_UPDATE_INIT_SUCCESS.getStrValue();
        } else {
            constructAdminMap.put(OLD_OBJECT, categoryChecker);
            categoryChecker.setCategoryName(updateCategoryRequest.getCategoryName());
            categoryChecker.setParentCategoryCode(updateCategoryRequest.getParentCategoryCode());
            categoryCheckerRepository.save(categoryChecker);
            constructAdminMap.put(NEW_OBJECT, categoryChecker);
            responseMessageCode = MessageCodes.CATEGORY_UPDATE_APPR_SUCCESS.getStrValue();
            kafkaTemplate.send("categoryChecker", categoryChecker);
        }
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        createRequestResponseHistObject();
        createAuditLogMap(constructAdminMap);
        generateReponseMessage(params);
        return createResponse();
    }

    /**
     * Validate the request parameters
     */
    @Override
    public void validateInputs() {
        if (CommonUtils.isNullorEmpty(categoryCode)) {
            throw new ValidationException("Category Code", MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        if (CommonUtils.isNullorEmpty(updateCategoryRequest.getCategoryName())) {
            throw new ValidationException("Category Name", MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        if (CommonUtils.isNullorEmpty(updateCategoryRequest.getParentCategoryCode())) {
            throw new ValidationException("Parent Category Code", MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        categoryChecker = categoryCheckerRepository.getCategoryByCategoryCode(Constants.YES.getStrValue(),
                categoryCode);
        if (categoryChecker == null) {
            throw new ValidationException(categoryCode, MessageCodes.CATEGORY_CODE_NOT_FOUND.getStrValue());
        }
        categoryMaker = categoryMakerRepository.getCategoryByCategoryCode(categoryCode);
        if (categoryMaker != null) {
            throw new ValidationException(categoryCode, MessageCodes.UNDER_APPROVAL.getStrValue());
        }
    }

    /**
     * Construct the UpdateCategoryInitiateResponse
     * 
     * @return UpdateCategoryInitiateResponse
     */
    @Override
    public UpdateCategoryInitiateResponse createResponse() {
        UpdateCategoryInitiateResponse categoryInitiateResponse = new UpdateCategoryInitiateResponse();
        categoryInitiateResponse.setStatus(responseStatus);
        categoryInitiateResponse.setExternalRefId(updateCategoryRequest.getExternalRefId());
        categoryInitiateResponse.setReferenceId(referenceId);
        categoryInitiateResponse.setMessage(responseMessage);
        return categoryInitiateResponse;
    }

}
