package com.comviva.mfs.service.grouprole;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.GroupRoleChecker;
import com.comviva.mfs.entity.GroupRoleMaker;
import com.comviva.mfs.entity.SysGroupRoleChecker;
import com.comviva.mfs.entity.SysGroupRoleMaker;
import com.comviva.mfs.model.grouprole.DeleteGroupRoleApproveRequest;
import com.comviva.mfs.model.grouprole.DeleteGroupRoleApproveResponse;
import com.comviva.mfs.repository.GroupRoleCheckerRepository;
import com.comviva.mfs.repository.GroupRoleMakerRepository;
import com.comviva.mfs.repository.SysGroupRoleCheckerRepository;
import com.comviva.mfs.repository.SysGroupRoleMakerRepository;
import com.comviva.mfs.repository.SysMessagesRepository;
import com.comviva.mfs.service.CommonService;

@Service
@Scope(scopeName=ConfigurableBeanFactory.SCOPE_PROTOTYPE,proxyMode = ScopedProxyMode.TARGET_CLASS)
public class DeleteGroupRoleApproveService extends CommonService {

	private String groupRoleCode;
	private String action;
	private SysGroupRoleMaker sysGroupRoleMaker;
	private SysGroupRoleChecker sysGroupRoleChecker;
	private GroupRoleMakerRepository groupRoleMakerRepository;
	private GroupRoleCheckerRepository groupRoleCheckerRepository;
	private SysGroupRoleMakerRepository sysGroupRoleMakerRepository;
	private SysGroupRoleCheckerRepository sysGroupRoleCheckerRepository;
	private DeleteGroupRoleApproveRequest deleteGroupRoleApproveRequest;
	private List<GroupRoleMaker> groupRoleMakerList;
	private List<GroupRoleChecker> groupRoleCheckerList;

	/**
	 * @param groupRoleCheckerRepository
	 * @param groupRoleMakerRepository
	 */
	@Autowired
	public DeleteGroupRoleApproveService(SysMessagesRepository sysMessagesRepository,	
			GroupRoleMakerRepository groupRoleMakerRepository, 
			GroupRoleCheckerRepository groupRoleCheckerRepository,
			SysGroupRoleMakerRepository sysGroupRoleMakerRepository,
			SysGroupRoleCheckerRepository sysGroupRoleCheckerRepository) {
		this.sysMessagesRepository = sysMessagesRepository;
		this.groupRoleMakerRepository = groupRoleMakerRepository;
		this.groupRoleCheckerRepository = groupRoleCheckerRepository;
		this.sysGroupRoleMakerRepository = sysGroupRoleMakerRepository;
		this.sysGroupRoleCheckerRepository = sysGroupRoleCheckerRepository;
	}

	/**
	 * @param groupRoleCode
	 * @param action
	 * @param deleteGroupRoleApproveRequest
	 * @return
	 */
	public DeleteGroupRoleApproveResponse execute(String groupRoleCode, String action, DeleteGroupRoleApproveRequest deleteGroupRoleApproveRequest) {
		Map<String, Object> constructAdminMap = new HashMap<>();
		List<String> params = new ArrayList<>();
		groupRoleCheckerList = new ArrayList<>();
		groupRoleMakerList =  new ArrayList<>();
			this.deleteGroupRoleApproveRequest = deleteGroupRoleApproveRequest;
			this.groupRoleCode = groupRoleCode;
			this.action = action;
			serviceRoleCode = ServiceRoleCodes.GROUP_ROLE_CURD_ROLE.getStrValue();
			super.initiate(deleteGroupRoleApproveRequest, serviceRoleCode);
			validateInputs();	
			if (Constants.ACTION.getStrValue().equals(action)) {				
				responseMessageCode = MessageCodes.GROUP_ROLE_DELETE_APPR_SUCCESS.getStrValue();
				params.add(sysGroupRoleChecker.getGroupRoleName());
				groupRoleCheckerRepository.deleteAll(groupRoleCheckerList);
				sysGroupRoleCheckerRepository.delete(sysGroupRoleChecker);
				
			} else {
				responseMessageCode = MessageCodes.GROUP_ROLE_REJECT_SUCCESS.getStrValue();
			}	
			responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
			groupRoleMakerRepository.deleteAll(groupRoleMakerList);
			sysGroupRoleMakerRepository.delete(sysGroupRoleMaker);			
			createRequestResponseHistObject();
			constructAdminMap.put("newObject", sysGroupRoleMaker);
			constructAdminMap.put("oldObject", sysGroupRoleMaker);
			createAuditLogMap(constructAdminMap);
		generateReponseMessage(params);
		return createResponse();
	}

	@Override
	public void validateInputs() {
		if (CommonUtils.isNullorEmpty(groupRoleCode)) {
			throw new ValidationException(Constants.GROUP_ROLE_CODE.getStrValue(),MessageCodes.FIELD_MANDATORY.getStrValue());
		} else if (!CommonUtils.isAlphaNumericAndLenghtCheck(groupRoleCode, groupRoleCode.length(), Constants.GROUPROLE_CODE_LENGTH.getIntValue())) {
			throw new ValidationException(Constants.GROUP_ROLE_CODE.getStrValue(),MessageCodes.FIELD_ALPHANUMERIC.getStrValue());
		}
		if (CommonUtils.isNullorEmpty(action)) {
			throw new ValidationException(Constants.ACTION_CODE.getStrValue(),MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		sysGroupRoleMaker = sysGroupRoleMakerRepository.getGroupRoleByGroupRoleCode(groupRoleCode);
		if (sysGroupRoleMaker == null) {
			throw new ValidationException(groupRoleCode, MessageCodes.NO_APPROVAL_PENDING.getStrValue());
		}else {
			groupRoleMakerList = groupRoleMakerRepository.getAllGroupRoleByCode(groupRoleCode);	
		}		
		sysGroupRoleChecker = sysGroupRoleCheckerRepository.getGroupRoleByGroupRoleCode(groupRoleCode);
		if (sysGroupRoleChecker == null) {
			throw new ValidationException(groupRoleCode, MessageCodes.GROUP_ROLE_CODE_NOT_FOUND.getStrValue());
		}else {
			groupRoleCheckerList = groupRoleCheckerRepository.getAllGroupRoleByCode(groupRoleCode);
		}
			
		
	}

	@Override
	public DeleteGroupRoleApproveResponse createResponse() {
		DeleteGroupRoleApproveResponse deleteGroupRoleApproveResponse = new DeleteGroupRoleApproveResponse();
		deleteGroupRoleApproveResponse.setStatus(responseStatus);
		deleteGroupRoleApproveResponse.setExternalRefId(deleteGroupRoleApproveRequest.getExternalRefId());
		deleteGroupRoleApproveResponse.setReferenceId(referenceId);
		deleteGroupRoleApproveResponse.setMessage(responseMessage);
		return deleteGroupRoleApproveResponse;
	}
}
