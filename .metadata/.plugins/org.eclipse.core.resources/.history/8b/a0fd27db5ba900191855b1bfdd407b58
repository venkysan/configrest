package com.comviva.mfs.service.domain;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.ApplicationException;
import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.DomainChecker;
import com.comviva.mfs.entity.DomainMaker;
import com.comviva.mfs.model.BaseRequest;
import com.comviva.mfs.model.domain.GetDomainsByAppCodeResponse;
import com.comviva.mfs.repository.DomainCheckerRepository;
import com.comviva.mfs.repository.DomainMakerRepository;
import com.comviva.mfs.repository.SysMessagesRepository;
import com.comviva.mfs.service.CommonService;

/**
 * @author sudharshans
 */
@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class GetDomainsByAppCodeService extends CommonService {

    private String applicationCode;
    private String initiateStatus;
    private List<DomainMaker> domainMakers;
    private List<DomainChecker> domainCheckers;
    private DomainMakerRepository domainMakerRepository;
    private DomainCheckerRepository domainCheckerRepository;

    /**
     * @param sysMessagesRepository
     * @param domainCheckerRepository
     */
    @Autowired
    public GetDomainsByAppCodeService(SysMessagesRepository sysMessagesRepository,
            DomainCheckerRepository domainCheckerRepository, DomainMakerRepository domainMakerRepository) {
        this.domainCheckerRepository = domainCheckerRepository;
        this.domainMakerRepository = domainMakerRepository;
        this.sysMessagesRepository = sysMessagesRepository;
    }

    /**
     * @param domainCode
     * @param identifierType
     * @param identifierValue
     * @param bearerCode
     * @return
     */
    public GetDomainsByAppCodeResponse execute(String applicationCode, String identifierType, String identifierValue,
            String bearerCode, String initiateStatus) {
        List<String> params = new ArrayList<>();
        this.initiateStatus = initiateStatus;
        this.applicationCode = applicationCode;
        BaseRequest request = new BaseRequest();
        request.setIdentifierType(identifierType);
        request.setIdentifierValue(identifierValue);
        request.setBearerCode(bearerCode);
        serviceRoleCode = ServiceRoleCodes.VIEW_DOMAIN_ROLE.getStrValue();
        super.initiate(request, serviceRoleCode);
        validateInputs();
        if (initiateStatus.equals(Constants.YES.getStrValue())) {
            copyMakersToCheckers();
        }
        responseMessageCode = MessageCodes.SUCCESS.getStrValue();
        responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
        generateReponseMessage(params);
        return createResponse();
    }

    @Override
    public void validateInputs() {
        if (CommonUtils.isNullorEmpty(applicationCode)) {
            throw new ValidationException(Constants.APPLICATION_CODE.getStrValue(),
                    MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        
        if (CommonUtils.isNullorEmpty(initiateStatus)) {
            throw new ValidationException(Constants.INITIATE_TYPE.getStrValue(),MessageCodes.FIELD_MANDATORY.getStrValue());
        }
        
        if (!CommonUtils.isYesOrNo(initiateStatus)) {
            throw new ValidationException(Constants.INITIATE_TYPE.getStrValue(),
                    MessageCodes.FIELD_INVALID.getStrValue());
        } else if (initiateStatus.equals(Constants.YES.getStrValue())) {
            domainMakers = domainMakerRepository.getDomainByAppCode(Constants.ADD_INITIATE_STATUS.getStrValue(),
                    applicationCode);
            if (null == domainMakers) {
                throw new ApplicationException(MessageCodes.NO_RECORDS_FOUND.getStrValue());
            }
        } else if (initiateStatus.equals(Constants.NO.getStrValue())) {
            domainCheckers = domainCheckerRepository.getDomainByAppCode(Constants.ACTIVE_STATUS.getStrValue(),
                    applicationCode);
            if (null == domainCheckers) {
                throw new ApplicationException(MessageCodes.NO_RECORDS_FOUND.getStrValue());
            }
        }
    }

    @Override
    public GetDomainsByAppCodeResponse createResponse() {
        GetDomainsByAppCodeResponse getDomainsByAppCodeResponse = new GetDomainsByAppCodeResponse();
        getDomainsByAppCodeResponse.setStatus(responseStatus);
        getDomainsByAppCodeResponse.setMessage(responseMessage);
        getDomainsByAppCodeResponse.setAllDomainList(domainCheckers);
        getDomainsByAppCodeResponse.setReferenceId(referenceId);
        return getDomainsByAppCodeResponse;
    }

    private void copyMakersToCheckers() {
        DomainChecker domainChecker;
        for (DomainMaker domainMaker : domainMakers) {
            domainChecker = new DomainChecker();
            copyObjects(domainChecker, domainMaker);
            domainCheckers.add(domainChecker);
        }
    }

}