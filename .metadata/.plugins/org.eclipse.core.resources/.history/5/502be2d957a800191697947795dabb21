package com.comviva.mfs.repository.repositoryimpl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Component;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.DbConstants;
import com.comviva.mfs.common.SupportApiConstants;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.model.category.CategoryService;
import com.comviva.mfs.model.category.ServiceTypesResponse;
import com.comviva.mfs.repository.SupportApiCustomRepository;
import com.comviva.mfs.repository.SystemDataRepository;
import com.google.common.collect.Maps;

@Component
@SuppressWarnings({ "rawtypes", "unchecked" })
public class SupportApiCustomRepositoryImpl implements SupportApiCustomRepository {

	private static final Logger LOGGER = LoggerFactory.getLogger(SupportApiCustomRepositoryImpl.class);

	@PersistenceContext
	private EntityManager entityManager;
	@Autowired
	private SystemDataRepository systemDataRepository;

	@Override
	public List<Map> getWalletOrBankDetails(Long providerId, String paymentInstuType, String walletOrBankId,
			String categoryCode) {
		List<Map> walletOrBankList = new ArrayList<>();
		try {
			StringBuilder sbf = null;
			if (paymentInstuType != null
					&& paymentInstuType.equals(SupportApiConstants.PAYMENT_METHOD_TYPE_BANK.getStrValue())) {
				sbf = new StringBuilder(
						"select distinct t1.description,t.id,t1.servicePymtId from SysControlGroup scg, SysServiceProfileBearer sspb, SysServicePymtSubtypeMap t, SysServicePymtMap t1"
								+ " where  scg.typeId =:userTypeInit "
								+ " and scg.servPrflBearerId = sspb.servPrflBearerId"
								+ " and sspb.categoryCode =:category" + " and t.providerId =:providerId"
								+ " and t.paymentMethodTypeId =:paymentType and t.bankId =:walletOrBankId"
								+ " and scg.paymentMethodTypeId = t.paymentMethodTypeId"
								+ " and t.servicePymtId = scg.servicePymtId"
								+ " and t1.initiatorPaymentInstrument =  t.paymentMethodTypeId"
								+ " and t1.isAuthCheckRequired = 'Y'" + " and  t1.servicePymtId = t.servicePymtId "
								+ " and  scg.statusId=:statusActiveOne" + " and  t1.status=:statusActiveSec");
			} else {
				sbf = new StringBuilder(
						"select distinct t1.description,t.id,t1.servicePymtId from SysControlGroup scg, SysServiceProfileBearer sspb, SysServicePymtSubtypeMap t, SysServicePymtMap t1"
								+ " where  scg.typeId =:userTypeInit "
								+ " and scg.servPrflBearerId = sspb.servPrflBearerId"
								+ " and sspb.categoryCode =:category " + " and t.providerId =:providerId"
								+ " and t.paymentMethodTypeId =:paymentType" + " and t.paymentTypeId =:walletOrBankId"
								+ " and scg.paymentMethodTypeId = t.paymentMethodTypeId"
								+ " and t.servicePymtId = scg.servicePymtId"
								+ " and t1.initiatorPaymentInstrument =  t.paymentMethodTypeId"
								+ " and t1.isAuthCheckRequired = 'Y'" + " and t1.servicePymtId = t.servicePymtId "
								+ " and scg.statusId=:statusActiveOne" + " and t1.status=:statusActiveSec");
			}

			Query query = entityManager.createQuery(sbf.toString());
			query.setParameter("userTypeInit", SupportApiConstants.USER_TYPE_INITIATOR.getStrValue());
			query.setParameter("category", categoryCode);
			query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
			query.setParameter("paymentType", paymentInstuType);
			if (paymentInstuType != null
					&& paymentInstuType.equals(SupportApiConstants.PAYMENT_METHOD_TYPE_BANK.getStrValue())) {
				query.setParameter("walletOrBankId", walletOrBankId);
			} else {
				query.setParameter("walletOrBankId", Long.valueOf(walletOrBankId));
			}
			query.setParameter("statusActiveOne", SupportApiConstants.ACTIVE.getStrValue());
			query.setParameter("statusActiveSec", SupportApiConstants.ACTIVE.getStrValue());

			List tempLinkedWalletOrBankList = query.getResultList();
			HashMap tempMap = null;
			for (int i = 0; i < tempLinkedWalletOrBankList.size(); i++) {
				tempMap = new HashMap();
				tempMap.put("serviceName", ((Object[]) (tempLinkedWalletOrBankList.get(i)))[0]);
				Long serviceTypeId = (Long) ((Object[]) (tempLinkedWalletOrBankList.get(i)))[2];
				if (serviceTypeId != 9022 && serviceTypeId != 9024) {
					tempMap.put("serviceName", ((Object[]) (tempLinkedWalletOrBankList.get(i)))[0]);
					tempMap.put("serviceId", ((Object[]) (tempLinkedWalletOrBankList.get(i)))[1]);
					tempMap.put("serviceType", ((Object[]) (tempLinkedWalletOrBankList.get(i)))[2]);
					walletOrBankList.add(tempMap);
				}
			}
		} catch (Exception e) {
			LOGGER.error("Exception occur while getWalletOrBankDetails :{}", e);
		}
		return walletOrBankList;
	}

	@Override
	public List<CategoryService> loadWalServicesForPayerBlock(String domainCode) {
		Query query = entityManager.createQuery(
				"select distinct t.servicePymtId,t.description,t.serviceType,t1.payerDomainCode,t1.payeeDomainCode,t1.initiatorDomainCode from SysServicePymtMap t,SysServiceDomainMap t1 where t1.payerDomainCode=:domainCode  and t.isTcpApplicableForService='Y' and t.servicePymtId=t1.servicePymtId and t.payerPaymentInstrument='WALLET' and t.status='Y' and t1.status='Y' and t.serviceStage<>'C'");
		query.setParameter(SupportApiConstants.DOMAIN_CODE.getStrValue(), domainCode);
		return categoryServiceConverter(query.getResultList());
	}

	@Override
	public List<CategoryService> loadWalServicesForPayeeBlock(String domainCode) {
		Query query = entityManager.createQuery(
				"select distinct t.servicePymtId,t.description,t.serviceType,t1.payerDomainCode,t1.payeeDomainCode,t1.initiatorDomainCode from SysServicePymtMap t,SysServiceDomainMap t1 where t1.payeeDomainCode=:domainCode and t.isTcpApplicableForService='Y' and t.servicePymtId=t1.servicePymtId and t.payeePaymentInstrument='WALLET' and t.status='Y' and t1.status='Y' and t.serviceStage<>'C'");
		query.setParameter(SupportApiConstants.DOMAIN_CODE.getStrValue(), domainCode);
		return categoryServiceConverter(query.getResultList());
	}

	@Override
	public List<CategoryService> loadWalServicesForInitiatorBlock(String domainCode) {
		Query query = entityManager.createQuery(
				"select distinct t.servicePymtId,t.description,t.serviceType,t1.payerDomainCode,t1.payeeDomainCode,t1.initiatorDomainCode from SysServicePymtMap t,SysServiceDomainMap t1 where t1.initiatorDomainCode=:domainCode and t.isTcpApplicableForService='Y' and t.servicePymtId=t1.servicePymtId and t.initiatorPaymentInstrument='WALLET' and t.status='Y' and t1.status='Y'");
		query.setParameter(SupportApiConstants.DOMAIN_CODE.getStrValue(), domainCode);
		return categoryServiceConverter(query.getResultList());

	}

	@Override
	public List<CategoryService> loadBankServicesForPayerBlock(String domainCode) {
		Query query = entityManager.createQuery(
				"select distinct t.servicePymtId,t.description,t.serviceType,t1.payerDomainCode,t1.payeeDomainCode,t1.initiatorDomainCode from SysServicePymtMap t,SysServiceDomainMap t1 where t1.payerDomainCode=:domainCode and t.servicePymtId=t1.servicePymtId and t.payerPaymentInstrument='BANK' and t.status='Y' and t1.status='Y' and t.serviceStage<>'C'");
		query.setParameter(SupportApiConstants.DOMAIN_CODE.getStrValue(), domainCode);
		return categoryServiceConverter(query.getResultList());

	}

	@Override
	public List<CategoryService> loadBankServicesForPayeeBlock(String domainCode) {
		Query query = entityManager.createQuery(
				"select distinct t.servicePymtId,t.description,t.serviceType,t1.payerDomainCode,t1.payeeDomainCode,t1.initiatorDomainCode from SysServicePymtMap t,SysServiceDomainMap t1 where t1.payeeDomainCode=:domainCode and t.servicePymtId=t1.servicePymtId and t.payeePaymentInstrument='BANK' and t.status='Y' and t1.status='Y' and t.serviceStage<>'C'");
		query.setParameter(SupportApiConstants.DOMAIN_CODE.getStrValue(), domainCode);
		return categoryServiceConverter(query.getResultList());
	}

	@Override
	public List<CategoryService> loadBankServicesForInitiatorBlock(String domainCode) {
		Query query = entityManager.createQuery(
				"select distinct t.servicePymtId,t.description,t.serviceType,t1.payerDomainCode,t1.payeeDomainCode,t1.initiatorDomainCode from SysServicePymtMap t,SysServiceDomainMap t1 where t1.initiatorDomainCode=:domainCode and t.servicePymtId=t1.servicePymtId and t.initiatorPaymentInstrument='BANK' and t.status='Y' and t1.status='Y' and t.serviceStage<>'C'");
		query.setParameter(SupportApiConstants.DOMAIN_CODE.getStrValue(), domainCode);
		return categoryServiceConverter(query.getResultList());

	}

	@Override
	public List<CategoryService> loadNonServicesForInitiatorBlock(String domainCode) {
		Query query = entityManager.createQuery(
				"select distinct t.servicePymtId,t.description,t.serviceType,t1.payerDomainCode,t1.payeeDomainCode,t1.initiatorDomainCode,t.initiatorPaymentInstrument from SysServicePymtMap t,SysServiceDomainMap t1,sys_service_types sst where t1.initiatorDomainCode=:domainCode and t.servicePymtId=t1.servicePymtId and t.initiatorPaymentInstrument in('NONE','WALLET','BANK') and t.status='Y' and t1.status='Y' and t.serviceType=sst.serviceType and sst.isFinancial='N'");
		query.setParameter(SupportApiConstants.DOMAIN_CODE.getStrValue(), domainCode);
		return categoryServiceConverter(query.getResultList());
	}

	private List<CategoryService> categoryServiceConverter(List<Object[]> list) {
		List<CategoryService> walList = new ArrayList<>();
		CategoryService categoryService;
		if (!CommonUtils.isNullorEmpty(list)) {
			for (Object[] row : list) {
				categoryService = new CategoryService();
				categoryService.setServicePymtId(((Long) row[0]));
				categoryService.setDescription(((String) row[1]).trim());
				categoryService.setServiceType(((String) row[2]).trim());
				categoryService.setPayerDomainCode(((String) row[3]).trim());
				categoryService.setPayeeDomainCode(((String) row[4]).trim());
				categoryService.setInitiatorDomainCode(((String) row[5]).trim());
				walList.add(categoryService);
			}
		}
		return walList;
	}

	@Override
	public List<ServiceTypesResponse> getAllServiceTypes() {
		List<ServiceTypesResponse> list = new ArrayList<>();
		try {
			Query query = entityManager.createQuery("select distinct sst.serviceType, sst.serviceName "
					+ " FROM SysControlGroup scg, SysServiceProfileBearer sspb, SysServiceTypes sst, SysServicePymtMap t "
					+ " WHERE scg.typeId = 'PAYER' AND sst.statusId <> 'N' AND scg.servPrflBearerId = sspb.servPrflBearerId "
					+ " AND sspb.serviceType = sst.serviceType AND sst.serviceType = t.serviceType AND t.isTransferRuleApplicable = 'Y' ");
			List<Object[]> tempServiceList = query.getResultList();
			ServiceTypesResponse serviceType = null;
			for (int i = 0; i < tempServiceList.size(); i++) {
				serviceType = new ServiceTypesResponse();
				serviceType.setServiceType((String) tempServiceList.get(i)[0]);
				serviceType.setServiceName((String) tempServiceList.get(i)[1]);
				list.add(serviceType);
			}
		} catch (Exception e) {
			LOGGER.error("Exception occur while getAllServiceTypes :{}", e);
		}
		return list;
	}

	@Override
	public List<Map> getWalletOrBankByDomainCodeDetails(String serviceType, Long providerId, String paymentInstrumentId, String domainCode) {
		List<Map> linkedWalletOrBankList = new ArrayList<>();

		String commissionWalletTypeId = systemDataRepository.getSystemPreferenceValue(SupportApiConstants.COMMISSION_WALLET_IDENTIFIER.getStrValue()).toString();
		String isCommissionWallet = systemDataRepository
				.getSystemPreferenceValue(SupportApiConstants.IS_COMMISSION_WALLET_REQUIRED.getStrValue()).toString();
		String isRemittanceWallet = systemDataRepository
				.getSystemPreferenceValue(SupportApiConstants.IS_REMITTANCE_WALLET_REQUIRED.getStrValue()).toString();
		String remittanceWalletTypeId = systemDataRepository
				.getSystemPreferenceValue(SupportApiConstants.REMITTANCE_WALLET_IDENTIFIER.getStrValue()).toString();
		String protelecomRemittId = systemDataRepository
				.getSystemPreferenceValue(SupportApiConstants.PROTELECOM_REMITTANCE_WALLET_IDENTIFIER.getStrValue())
				.toString();
		try {
			Query query = null;
			List bankingServices = Arrays.asList(SupportApiConstants.BANKING_SERVICES.getStrValue().split(","));
			if (bankingServices.contains(serviceType)) {
				if (paymentInstrumentId != null
						&& paymentInstrumentId.equals(SupportApiConstants.PAYMENT_METHOD_TYPE_BANK.getStrValue())) {
					query = entityManager.createQuery(
							"select t1.bankId, t1.bankName from BankDetails t1 where t1.bankPoolAccountNo is not null and t1.providerId=:providerId");
					query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);

				} else {
					if (SupportApiConstants.DOMAIN_SUBSCRIBER.getStrValue().equalsIgnoreCase(domainCode)) {
						if (isCommissionWallet.equalsIgnoreCase(Constants.YES.getStrValue())) {
							query = entityManager.createQuery(
									"select distinct(t.providerId ), t1.subTypeName from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1 where t1.status =:yes  and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId and t1.paymentTypeId<> =:commissionWalletTypeId");
							query.setParameter("yes", Constants.YES.getStrValue());
							query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
							query.setParameter(DbConstants.COMMISSIONWALLET_TYPE_ID.getStrValue(),
									commissionWalletTypeId);
						} else {
							query = entityManager.createQuery(
									"select distinct(t.providerId ), t1.subTypeName from SysServicePymtSubtypeMap t,\r\n"
											+ " SysPaymentMethodSubtypes t1 where t1.status ='Y' and t.providerId =:providerId\r\n"
											+ " and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId\"");
							query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
						}

					} else {
						if (Constants.TRUE.getStrValue().equalsIgnoreCase(isRemittanceWallet)) {
							query = entityManager.createQuery(
									"select distinct(t.paymentTypeId ), t1.subTypeName from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1  where t1.status ='Y' and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId and t1.paymentTypeId<>=:remittanceWalletTypeId");
							query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
							query.setParameter(DbConstants.REMITTANCEWALLET_TYPE_ID.getStrValue(),
									remittanceWalletTypeId);
						} else {
							query = entityManager.createQuery(
									"select distinct(t.paymentTypeId ), t1.subTypeName from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1 where t1.status ='Y' and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId");
							query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
						}
					}
				}
			} else {
				if (paymentInstrumentId != null
						&& paymentInstrumentId.equals(SupportApiConstants.PAYMENT_METHOD_TYPE_BANK.getStrValue())) {
					query = entityManager.createQuery(
							"select distinct(t.bankId), t1.bankName from SysServicePymtSubtypeMap t, BankDetails t1 where t.providerId =:providerId  and t.serviceType=:serviceType and t.paymentMethodTypeId = 'BANK' and t.bankId = t1.bankId");
					query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
					query.setParameter("serviceType", serviceType);
				} else {
					if (isCommissionWallet.equalsIgnoreCase(Constants.YES.getStrValue())
							&& domainCode.equalsIgnoreCase(SupportApiConstants.DOMAIN_SUBSCRIBER.getStrValue())) {
						if (SupportApiConstants.SERVICE_TYPE_CCASHOUT.getStrValue().equals(serviceType)) {
							query = entityManager.createQuery(
									"select distinct(t.paymentTypeId ), t1.subTypeName from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1 where t1.status ='Y' and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId");
							query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
						} else {
							query = entityManager.createQuery(
									"select distinct(t.paymentTypeId ), t1.subTypeName from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1 where t1.status = 'Y' and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId and t1.paymentTypeId<>=:commissionWalletTypeId");
							query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
							query.setParameter("commissionWalletTypeId", commissionWalletTypeId);
						}
					} else if (isCommissionWallet.equalsIgnoreCase(Constants.YES.getStrValue())
							&& (domainCode.equalsIgnoreCase(SupportApiConstants.MER_DOMAIN.getStrValue())
									|| domainCode.equalsIgnoreCase(SupportApiConstants.ENTERPRISE_DOMAIN.getStrValue())
									|| domainCode.equalsIgnoreCase(
											SupportApiConstants.USER_TYPE_OPERATOR_CODE.getStrValue()))) {

						query = entityManager.createQuery(
								"select distinct(t.paymentTypeId ), t1.subTypeName,t.isDefault from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1 where t1.status ='Y' and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId and t1.paymentTypeId<>=:commissionWalletTypeId and t.paymentTypeId<>=:remittanceWalletTypeId and t.paymentTypeId<>=:protelecomRemittId order by t.isDefault desc");
						query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
						query.setParameter("commissionWalletTypeId", commissionWalletTypeId);
						query.setParameter("remittanceWalletTypeId", remittanceWalletTypeId);
						query.setParameter(DbConstants.PROTELECOM_REMITT_ID.getStrValue(), protelecomRemittId);
					} else {
						if (isRemittanceWallet.equalsIgnoreCase(Constants.TRUE.getStrValue())
								&& (domainCode.equalsIgnoreCase(SupportApiConstants.DOMAIN_SUBSCRIBER.getStrValue()))) {
							if (SupportApiConstants.SERVICE_TYPE_CCASHOUT.getStrValue().equals(serviceType)) {
								query = entityManager.createQuery(
										"select distinct(t.paymentTypeId ), t1.subTypeName from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1 where t1.status = 'Y' and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId ");
								query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
							} else {
								query = entityManager.createQuery(
										"select distinct(t.paymentTypeId ), t1.subTypeName from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1 where t1.status = 'Y' and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId");
								query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
							}
						} else {
							query = entityManager.createQuery(
									"select distinct(t.paymentTypeId ), t1.subTypeName ,t.isDefault from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1 where t1.status = 'Y' and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId and t.paymentTypeId<>=:remittanceWalletTypeId and t.paymentTypeId<>=:protelecomRemittId order by t.isDefault desc");
							query.setParameter(DbConstants.PROVIDER_ID.getStrValue(), providerId);
							query.setParameter("remittanceWalletTypeId", remittanceWalletTypeId);
							query.setParameter(DbConstants.PROTELECOM_REMITT_ID.getStrValue(), protelecomRemittId);
						}
					}
				}
			}

			if (isRemittanceWallet.equalsIgnoreCase(Constants.TRUE.getStrValue())) {
				if (SupportApiConstants.TRANSFER_FUNDS_BETWEEN_SELF_WALLETS_SERVICE_TYPE.getStrValue()
						.equals(serviceType)
						|| SupportApiConstants.TRANSFER_FUNDS_BETWEEN_RELATED_PARTIES_SERVICE_TYPE.getStrValue()
								.equals(serviceType)) {
					query = entityManager.createQuery(
							"select distinct(t.paymentTypeId ), t1.subTypeName ,t.isDefault from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1 where t1.status ='Y' and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId and t.paymentTypeId<>=:commission_wallet_type_id order by t.isDefault desc");
					query.setParameter("providerId", providerId);
					query.setParameter("commission_wallet_type_id", commissionWalletTypeId);
				}
			} else {
				if (SupportApiConstants.TRANSFER_FUNDS_BETWEEN_SELF_WALLETS_SERVICE_TYPE.getStrValue()
						.equals(serviceType)
						|| SupportApiConstants.TRANSFER_FUNDS_BETWEEN_RELATED_PARTIES_SERVICE_TYPE.getStrValue()
								.equals(serviceType)) {
					query = entityManager.createQuery(
							"select distinct(t.paymentTypeId ), t1.subTypeName ,t.isDefault from SysServicePymtSubtypeMap t, SysPaymentMethodSubtypes t1 where t1.status ='Y' and t.providerId =:providerId and t.paymentMethodTypeId = 'WALLET' and t.paymentTypeId = t1.paymentTypeId and t.paymentTypeId<>=:remittance_wallet_type_idand t.paymentTypeId<>=:protelecomRemittId and t.paymentTypeId<>=:commission_wallet_type_id order by t.isDefault desc");
					query.setParameter("providerId", providerId);
					query.setParameter("remittance_wallet_type_id", remittanceWalletTypeId);
					query.setParameter("protelecomRemittId", protelecomRemittId);
					query.setParameter("commission_wallet_type_id", commissionWalletTypeId);
				}
			}

			List tempLinkedWalletOrBankList = query.getResultList();
			HashMap tempMap = null;
			for (int i = 0; i < tempLinkedWalletOrBankList.size(); i++) {
				tempMap = Maps.newHashMap();
				tempMap.put("linkedWalletBankId", ((Object[]) (tempLinkedWalletOrBankList.get(i)))[0]);
				tempMap.put("linkedWalletBankName", ((Object[]) (tempLinkedWalletOrBankList.get(i)))[1]);
				linkedWalletOrBankList.add(tempMap);
			}
		} catch (DataAccessException e) {
			LOGGER.error("DBAccessException e= {}", e.getMessage());
		}

		return linkedWalletOrBankList;
		
	}
}
