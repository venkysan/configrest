package com.comviva.mfs.controller.test;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.comviva.mfs.MdsApplication;
import com.comviva.mfs.common.ErrorCodes;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.constant.test.TestBaseConstants;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.CategoryMakerRepository;
import com.comviva.mfs.repository.CategoryRelationsCheckerRepository;
import com.comviva.mfs.util.CategoryDataPreparationUtil;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = MdsApplication.class)
@WebAppConfiguration
public class CategoryControllerTest {

	private MockMvc mockMvc;
	@Autowired
    private WebApplicationContext wac;
	@MockBean
	private CategoryCheckerRepository categoryCheckerRepository;
	@MockBean
	private CategoryRelationsCheckerRepository categoryRelationsCheckerRepository;
	@MockBean
	private CategoryMakerRepository categoryMakerRepository;
	
	
	@Before
    public void setup () {
		this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
    }
	
	@Test
	public void addCategoriesInitiateTest() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.addCategoryInitialRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void addCategoriesInitiateNoApprovalTest() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.addCategoryInitialNoApprovalRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void addCategoriesApprovalTest() throws Exception {
		when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getCategoryMaker());
		
		mockMvc.perform(MockMvcRequestBuilders.post(CategoryDataPreparationUtil.addCategoriesApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.addCategoryApproveRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void updateCategoriesInitiateTest() throws Exception {
		when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString())).thenReturn(null);
		when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getCategoryChecker());
		
		mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.updateCategoryInitialRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void updateCategoriesInitiateNoApprovalTest() throws Exception {
		when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getCategoryChecker());
		
		mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.updateCategoryInitialNoApprovalRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void updateCategoriesApprovalTest() throws Exception {
		when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getCategoryMaker());
		
		mockMvc.perform(MockMvcRequestBuilders.put(CategoryDataPreparationUtil.updateCategoriesApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.updateCategoryApproveRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void deleteCategoriesInitiateTest() throws Exception {
		when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getCategoryChecker());
		
		mockMvc.perform(MockMvcRequestBuilders.delete(CategoryDataPreparationUtil.deleteCategoriesInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.deleteCategoryInitialRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void deleteCategoriesInitiateNoApprovalTest() throws Exception {
		when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getCategoryChecker());
		
		mockMvc.perform(MockMvcRequestBuilders.delete(CategoryDataPreparationUtil.deleteCategoriesInitiateUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.deleteCategoryInitialNoApprovalRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void deleteCategoriesApprovalTest() throws Exception {
		when(categoryMakerRepository.getCategoryByCategoryCode(Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getCategoryMaker());
		
		mockMvc.perform(MockMvcRequestBuilders.delete(CategoryDataPreparationUtil.deleteCategoriesApprovalUrl())
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
				.content(CategoryDataPreparationUtil.deleteCategoryApproveRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void getAllCategoriesTest() throws Exception {
		when(categoryCheckerRepository.getAllActiveCategories(Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getCategories());
		
		mockMvc.perform(MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getAllCategoriesUrl())
				.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void getAllCategoriesEmptyCaseTest() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getAllCategoriesUrl())
				.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(ErrorCodes.NO_ACTIVE_CATEGORY_FOUND.getErrorCode())); 
	}

	@Test
	public void getSingleCategoryCategoriesTest() throws Exception {
		when(categoryCheckerRepository.getCategoryByCategoryCode(Mockito.anyString(), Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getCategoryChecker());
		
		mockMvc.perform(MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getSingleCategoriesUrl())
				.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue())); 
	}

	@Test
	public void getSingleCategoryCategoriesEmptyCaseTest() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getSingleCategoriesUrl())
				.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(MessageCodes.NO_RECORDS_FOUND.getStrValue()));
	}

	@Test
	public void getCategoriesByDomainCodeTest() throws Exception {
		mockMvc.perform(MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getCategoriesByDomainCodeUrl())
				.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue()));
	}

	@Test
	public void getCategoriesRelationByCategoryCodeTest() throws Exception {
		when(categoryRelationsCheckerRepository.getCategoryRelationByCategoryCode(Mockito.anyString()))
				.thenReturn(CategoryDataPreparationUtil.getCategoryRelationChecker());
		
		mockMvc.perform(MockMvcRequestBuilders.get(CategoryDataPreparationUtil.getCategoriesRelationByCategoryCodeUrl())
				.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue()).value(TestBaseConstants.SUCCESS_STATUS.getValue())); 
	}
}
