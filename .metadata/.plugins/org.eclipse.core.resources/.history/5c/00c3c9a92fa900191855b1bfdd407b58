package com.comviva.mfs.service.category;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.comviva.mfs.common.ApplicationException;
import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.DbConstants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.entity.CategoryMaker;
import com.comviva.mfs.entity.CategoryRoles;
import com.comviva.mfs.entity.SysControlGroup;
import com.comviva.mfs.entity.SysServiceProfileBearer;
import com.comviva.mfs.entity.SysServicePymtMap;
import com.comviva.mfs.model.category.CategoryService;
import com.comviva.mfs.model.category.UpdateCategoryApproveRequest;
import com.comviva.mfs.model.category.UpdateCategoryApproveResponse;
import com.comviva.mfs.model.category.WalletAndBankServiceForCategory;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.CategoryMakerRepository;
import com.comviva.mfs.repository.CategoryRolesRepository;
import com.comviva.mfs.repository.SysControlGroupRepository;
import com.comviva.mfs.repository.SysServiceProfileBearerRepository;
import com.comviva.mfs.repository.SysServicePymtMapRepository;
import com.comviva.mfs.service.CommonService;

@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class UpdateCategoryApproveService extends CommonService {

	private CategoryMakerRepository categoryMakerRepository;
	private CategoryCheckerRepository categoryCheckerRepository;
	private UpdateCategoryApproveRequest updateCategoryApproveRequest;
	private String categoryCode;
	private String action;

	@Autowired
	private KafkaTemplate<String, Object> kafkaTemplate;
	@Autowired
	private SysServicePymtMapRepository sysServicePymtMapRepository;

	@Autowired
	private SysServiceProfileBearerRepository sysServiceProfileBearerRepository;

	@Autowired
	private SysControlGroupRepository sysControlGroupRepository;

	@Autowired
	private CategoryRolesRepository categoryRolesRepository;

	@Autowired
	public UpdateCategoryApproveService(CategoryMakerRepository categoryMakerRepository,
			CategoryCheckerRepository categoryCheckerRepository) {
		this.categoryMakerRepository = categoryMakerRepository;
		this.categoryCheckerRepository = categoryCheckerRepository;
	}

	@Transactional
	public UpdateCategoryApproveResponse execute(String categoryCode, String action,
			UpdateCategoryApproveRequest updateCategoryApproveRequest) {
		Map<String, Object> constructAdminMap = new HashMap<>();
		List<String> params = new ArrayList<>();
		try {
			this.updateCategoryApproveRequest = updateCategoryApproveRequest;
			this.categoryCode = categoryCode;
			this.action = action;
			serviceRoleCode = ServiceRoleCodes.UPDATE_CATEGORY_APPR_ROLE.getStrValue();
			super.initiate(updateCategoryApproveRequest, serviceRoleCode);
			validateInputs();
			CategoryMaker categoryMaker = categoryMakerRepository.getCategoryByCategoryCode(categoryCode);
			if (categoryMaker == null) {
				throw new ValidationException(categoryCode, MessageCodes.NO_APPROVAL_PENDING.getStrValue());
			}
			CategoryChecker categoryChecker = new CategoryChecker();
			copyObjects(categoryChecker, categoryMaker);

			if (Constants.ACTION.getStrValue().equals(action)) {
				categoryChecker.setStatus(Constants.ACTIVE_STATUS.getStrValue());
				responseMessageCode = MessageCodes.CATEGORY_UPDATE_APPR_SUCCESS.getStrValue();
				params.add(categoryChecker.getCategoryName());
				categoryCheckerRepository.save(categoryChecker);
				saveSysBearerAndSysControlGroupProcess(updateCategoryApproveRequest.getCategoryDetails());
			} else {
				responseMessageCode = MessageCodes.CATEGORY_REJECT_SUCCESS.getStrValue();
			}
			params.add(categoryMaker.getCategoryName());
			categoryMakerRepository.delete(categoryMaker);
			responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
			createRequestResponseHistObject();
			constructAdminMap.put(NEW_OBJECT, categoryChecker);
			createAuditLogMap(constructAdminMap);
			kafkaTemplate.send("categoryChecker", categoryChecker);
		} catch (ValidationException | ApplicationException e) {
			handleException(e, params, this.getClass().getSimpleName());
		}
		generateReponseMessage(params);
		return createResponse();
	}

	@Override
	public void validateInputs() {
		if (CommonUtils.isNullorEmpty(categoryCode)) {
			throw new ValidationException("Category Code", MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		if (CommonUtils.isNullorEmpty(action)) {
			throw new ValidationException("Action ", MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		
		WalletAndBankServiceForCategory walletAndBankServiceForCategory = updateCategoryApproveRequest.getCategoryDetails();
		if(walletAndBankServiceForCategory == null) {
			throw new ValidationException(Constants.CATEGORY_DETAILS.getStrValue(),MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		walletAndBankServiceCheck(walletAndBankServiceForCategory);
	}
	
	private void walletAndBankServiceCheck(WalletAndBankServiceForCategory walletAndBankServiceForCategory) {
		// WALLET
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getPayerWalServiceList())) {
			throw new ValidationException(Constants.PAYER_SELECTION_WALLET_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getPayerWalServiceList()) {
			categoryServiceModelCheck(catService);
		}
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getPayeeWalServiceList())) {
			throw new ValidationException(Constants.PAYEE_SELECTION_WALLET_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getPayeeWalServiceList()) {
			categoryServiceModelCheck(catService);
		}
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getInitiatorWalServiceList())) {
			throw new ValidationException(Constants.INITIATOR_SELECTION_WALLET_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getInitiatorWalServiceList()) {
			categoryServiceModelCheck(catService);
		}
		// BANK
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getPayerBankServiceList())) {
			throw new ValidationException(Constants.PAYER_SELECTION_BANK_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getPayerBankServiceList()) {
			categoryServiceModelCheck(catService);
		}
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getPayeeBankServiceList())) {
			throw new ValidationException(Constants.PAYEE_SELECTION_BANK_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getPayeeBankServiceList()) {
			categoryServiceModelCheck(catService);
		}
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getInitiatorBankServiceList())) {
			throw new ValidationException(Constants.INITIATOR_SELECTION_BANK_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getInitiatorBankServiceList()) {
			categoryServiceModelCheck(catService);
		}
		if (!CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getNonFinancialList())) {
			for (CategoryService catService : walletAndBankServiceForCategory.getNonFinancialList()) {
				categoryServiceModelCheck(catService);
			}
		}
	}
	
	private void categoryServiceModelCheck(CategoryService catService) {
		if(catService.getServicePymtId() ==null || CommonUtils.isNullorZero(catService.getServicePymtId())) {
			throw new ValidationException(Constants.SERVICE_PYMT_ID.getStrValue(),MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		if(CommonUtils.isNullorEmpty(catService.getBearerCode())) {
			throw new ValidationException(Constants.SERVICE_BEARER_CODE.getStrValue(),MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		if(CommonUtils.isNullorEmpty(catService.getSelected())) {
			throw new ValidationException(Constants.SELECTED.getStrValue(),MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		if(!CommonUtils.isYesOrNo(catService.getSelected())) {
			throw new ValidationException(Constants.SELECTED.getStrValue(),MessageCodes.FIELD_INVALID.getStrValue());
		}
		if(sysServicePymtMapRepository.getSysServicePymtMapById(catService.getServicePymtId()) == null) {
			throw new ValidationException(Constants.SERVICE_PYMT_ID.getStrValue(),MessageCodes.FIELD_INVALID.getStrValue());
		}
	}

	@Override
	public UpdateCategoryApproveResponse createResponse() {
		UpdateCategoryApproveResponse updateCategoryApproveResponse = new UpdateCategoryApproveResponse();
		updateCategoryApproveResponse.setStatus(responseStatus);
		updateCategoryApproveResponse.setExternalRefId(updateCategoryApproveRequest.getExternalRefId());
		updateCategoryApproveResponse.setReferenceId(referenceId);
		updateCategoryApproveResponse.setMessage(responseMessage);
		return updateCategoryApproveResponse;
	}

	private void saveSysBearerAndSysControlGroupProcess(
			WalletAndBankServiceForCategory walletAndBankServiceForCategory) {
		for (int i = 0; i < walletAndBankServiceForCategory.getPayerWalServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getPayerWalServiceList().get(i),
					Constants.USER_TYPE_PAYER.getStrValue(), Constants.WALLET.getStrValue(), "PRW", i);
		}
		for (int i = 0; i < walletAndBankServiceForCategory.getPayeeWalServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getPayeeWalServiceList().get(i),
					Constants.USER_TYPE_PAYEE.getStrValue(), Constants.WALLET.getStrValue(), "PEW", i);
		}
		for (int i = 0; i < walletAndBankServiceForCategory.getInitiatorWalServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getInitiatorWalServiceList().get(i),
					Constants.INITIATOR.getStrValue(), Constants.WALLET.getStrValue(), "IRW", i);
		}
		for (int i = 0; i < walletAndBankServiceForCategory.getPayerBankServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getPayerBankServiceList().get(i),
					Constants.USER_TYPE_PAYER.getStrValue(), Constants.BANK.getStrValue(), "PRB", i);
		}
		for (int i = 0; i < walletAndBankServiceForCategory.getPayeeBankServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getPayeeBankServiceList().get(i),
					Constants.USER_TYPE_PAYEE.getStrValue(), Constants.BANK.getStrValue(), "PEB", i);
		}
		for (int i = 0; i < walletAndBankServiceForCategory.getInitiatorBankServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getPayeeBankServiceList().get(i),
					Constants.INITIATOR.getStrValue(), Constants.BANK.getStrValue(), "IRB", i);
		}
		if (!CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getNonFinancialList())) {
			for (int i = 0; i < walletAndBankServiceForCategory.getNonFinancialList().size(); i++) {
				saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getNonFinancialList().get(i),
						Constants.INITIATOR.getStrValue(), null, "I", i);
			}
		}
	}

	private void saveSysBearerAndSysControlGroup(CategoryService catService ,String typeId,String paymentMethod,String profileBearer,int index) {
		List<SysControlGroup> sysControlGroupList;
		SysControlGroup sysControlGroup;
		SysServicePymtMap sysServicePymtMap = sysServicePymtMapRepository.getSysServicePymtMapById(catService.getServicePymtId());
		if(sysServicePymtMap !=null) {
			sysControlGroupList = sysControlGroupRepository.getSysControlGroupBySeviceTypeAndBearerCodeAndCategory(catService.getServiceType(),catService.getBearerCode(),categoryCode);
		if(sysControlGroupList != null && !sysControlGroupList.isEmpty() ) {
			updateSysControlGroup(sysControlGroupList,catService);
		}else {
		SysServiceProfileBearer sysBearer = new SysServiceProfileBearer();
		String profileBearerId = catService.getBearerCode()+"_"+catService.getServiceType()+"_"+categoryCode+"_"+profileBearer+index;
		sysBearer.setServPrflBearerId(profileBearerId);
		sysBearer.setBearerId(catService.getBearerCode());
		sysBearer.setServiceType(catService.getServiceType());
		sysBearer.setCategoryCode(categoryCode);
		sysBearer.setCategoryProfileId(categoryCode);
		sysServiceProfileBearerRepository.save(sysBearer);
		Long maxGid = sysControlGroupRepository.getMaxGidValue()+1;
		sysControlGroup= new SysControlGroup();
		sysControlGroup.setGroupTypeId(String.valueOf(DbConstants.GROUP_ROLE_TYPE_ID.getStrValue()+maxGid));
		sysControlGroup.setName(sysServicePymtMap.getDescription());
		sysControlGroup.setServicePymtId(sysServicePymtMap.getServicePymtId());
		sysControlGroup.setGroupLevel(DbConstants.GROUP_LEVEL.getStrValue());
		if(CommonUtils.isNullorEmpty(paymentMethod)) {
			sysControlGroup.setPaymentMethodTypeId(sysServicePymtMap.getInitiatorPaymentInstrument());
		}else {
			sysControlGroup.setPaymentMethodTypeId(paymentMethod);
		}
		sysControlGroup.setTypeId(typeId);
		sysControlGroup.setStatusId(Constants.ACTIVE_STATUS.getStrValue());
		sysControlGroup.setServPrflBearerId(profileBearerId);
		sysControlGroupRepository.save(sysControlGroup);
		}
		CategoryRoles catRoles = categoryRolesRepository.getCategoryRoleByServiceTypeAndCategory(catService.getServiceType(), categoryCode);
			if (catRoles == null) {
				catRoles = new CategoryRoles();
				catRoles.setCategoryCode(categoryCode);
				catRoles.setRoleCode(catService.getServiceType());
				catRoles.setApplicationId(DbConstants.APPLICATION_ID_VALUE.getStrValue());
				categoryRolesRepository.save(catRoles);
			}
		}
	}
	
	private void updateSysControlGroup(List<SysControlGroup> sysControlGroupList,CategoryService catService) {
		for (SysControlGroup sgp : sysControlGroupList) {
			if (!catService.getSelected().equals(sgp.getStatusId())) {
				sgp.setStatusId(catService.getSelected());
				sysControlGroupRepository.save(sgp);
			}
		}
	}
}