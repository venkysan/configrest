
package com.comviva.mfs.integration.test;


import static org.junit.Assert.assertEquals;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.context.annotation.PropertySource;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;
import com.comviva.mfs.constant.integration.test.IntegrationTestBaseConstants;
import com.comviva.mfs.constant.test.TestBaseConstants;
import com.comviva.mfs.util.CategoryIntegDataPreparationUtil;

@RunWith(SpringRunner.class)
@PropertySource("classpath:application-test.properties")
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class CategoryIntegrationTest {

	@LocalServerPort
	private int port;

	private MockMvc mockMvc;
	@Autowired
	private WebApplicationContext wac;

	@Before
	public void setup() {
		this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
	}
	
	@Test
	public void categoryTest() throws Exception {

		ResultActions status;

		// Returns list of category in the system

		status = mockMvc
				.perform(MockMvcRequestBuilders.get(CategoryIntegDataPreparationUtil.getAllCategoriesUrl())
						.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

		assertEquals(Integer.parseInt(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()),
				status.andReturn().getResponse().getStatus());

		// Add Initiate Category
		status = mockMvc
				.perform(MockMvcRequestBuilders.post(CategoryIntegDataPreparationUtil.addCategoriesInitiateUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
						.content(CategoryIntegDataPreparationUtil.addCategoryInitialRequest()))
				.andExpect(status().isOk()).andExpect(
						MockMvcResultMatchers.jsonPath(IntegrationTestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
								.value(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()));

		assertEquals(Integer.parseInt(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()),
				status.andReturn().getResponse().getStatus());

		// Add Approve Category
		status = mockMvc
				.perform(MockMvcRequestBuilders.post(CategoryIntegDataPreparationUtil.addCategoriesApprovalUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
						.content(CategoryIntegDataPreparationUtil.addCategoryApproveRequest()))
				.andExpect(status().isOk()).andExpect(
						MockMvcResultMatchers.jsonPath(IntegrationTestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
								.value(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()));

		assertEquals(Integer.parseInt(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()),
				status.andReturn().getResponse().getStatus());

		// Returns category from the system
		status = mockMvc
				.perform(MockMvcRequestBuilders.get(CategoryIntegDataPreparationUtil.getSingleCategoriesUrl())
						.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk()).andExpect(
						MockMvcResultMatchers.jsonPath(IntegrationTestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
								.value(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()));

		assertEquals(Integer.parseInt(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()),
				status.andReturn().getResponse().getStatus());

		// Update Initiate category

		status = mockMvc
				.perform(MockMvcRequestBuilders.put(CategoryIntegDataPreparationUtil.updateCategoriesInitiateUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
						.content(CategoryIntegDataPreparationUtil.updateCategoryInitialRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

		assertEquals(Integer.parseInt(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()),
				status.andReturn().getResponse().getStatus());

		// Update Approve category
		status = mockMvc
				.perform(MockMvcRequestBuilders.put(CategoryIntegDataPreparationUtil.updateCategoriesApprovalUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
						.content(CategoryIntegDataPreparationUtil.updateCategoryApproveRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

		assertEquals(Integer.parseInt(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()),
				status.andReturn().getResponse().getStatus());

		// Delete Initiate category
		status = mockMvc
				.perform(MockMvcRequestBuilders.delete(CategoryIntegDataPreparationUtil.deleteCategoriesInitiateUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
						.content(CategoryIntegDataPreparationUtil.deleteCategoryInitialRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

		assertEquals(Integer.parseInt(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()),
				status.andReturn().getResponse().getStatus());

		// Delete Approve category
		status = mockMvc
				.perform(MockMvcRequestBuilders.delete(CategoryIntegDataPreparationUtil.deleteCategoriesApprovalUrl())
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
						.content(CategoryIntegDataPreparationUtil.deleteCategoryApproveRequest()))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath(TestBaseConstants.RESULT_STATUS_JSON_FIELD.getValue())
						.value(TestBaseConstants.SUCCESS_STATUS.getValue()));

		assertEquals(Integer.parseInt(IntegrationTestBaseConstants.SUCCESS_STATUS.getValue()),
				status.andReturn().getResponse().getStatus());
	}
}
