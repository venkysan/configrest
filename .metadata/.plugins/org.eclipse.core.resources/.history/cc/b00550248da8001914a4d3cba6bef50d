package com.comviva.mfs.service.category;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.DbConstants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.entity.CategoryMaker;
import com.comviva.mfs.entity.CategoryRoles;
import com.comviva.mfs.entity.SysControlGroup;
import com.comviva.mfs.entity.SysServiceProfileBearer;
import com.comviva.mfs.entity.SysServicePymtMap;
import com.comviva.mfs.model.category.AddCategoryApproveRequest;
import com.comviva.mfs.model.category.AddCategoryApproveResponse;
import com.comviva.mfs.model.category.CategoryService;
import com.comviva.mfs.model.category.WalletAndBankServiceForCategory;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.CategoryMakerRepository;
import com.comviva.mfs.repository.CategoryRolesRepository;
import com.comviva.mfs.repository.SysControlGroupRepository;
import com.comviva.mfs.repository.SysMessagesRepository;
import com.comviva.mfs.repository.SysServiceProfileBearerRepository;
import com.comviva.mfs.repository.SysServicePymtMapRepository;
import com.comviva.mfs.service.CommonService;

@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class AddCategoryApproveService extends CommonService {

	private String categoryCode;
	private String action;
	private CategoryCheckerRepository categoryCheckerRepository;
	private CategoryMakerRepository categoryMakerRepository;
	private AddCategoryApproveRequest categoryApproveRequest;

	@Autowired
	private KafkaTemplate<String, Object> kafkaTemplate;

	@Autowired
	private SysServicePymtMapRepository sysServicePymtMapRepository;

	@Autowired
	private SysServiceProfileBearerRepository sysServiceProfileBearerRepository;

	@Autowired
	private SysControlGroupRepository sysControlGroupRepository;

	@Autowired
	private CategoryRolesRepository categoryRolesRepository;

	/**
	 * @param categoryCheckerRepository
	 * @param categoryMakerRepository
	 * @param sysMessagesRepository
	 */
	@Autowired
	public AddCategoryApproveService(CategoryCheckerRepository categoryCheckerRepository,
			CategoryMakerRepository categoryMakerRepository, SysMessagesRepository sysMessagesRepository) {
		this.categoryCheckerRepository = categoryCheckerRepository;
		this.categoryMakerRepository = categoryMakerRepository;
		this.sysMessagesRepository = sysMessagesRepository;
	}

	/**
	 * @param categoryCode
	 * @param action
	 * @param categoryApproveRequest
	 * @return
	 */
	@Transactional
	public AddCategoryApproveResponse execute(String categoryCode, String action,
			AddCategoryApproveRequest categoryApproveRequest) {
		Map<String, Object> constructAdminMap = new HashMap<>();
		List<String> params = new ArrayList<>();
		try {
			this.categoryCode = categoryCode;
			this.action = action;
			this.categoryApproveRequest = categoryApproveRequest;
			serviceRoleCode = ServiceRoleCodes.ADD_CATEGORY_APPR_ROLE.getStrValue();
			super.initiate(categoryApproveRequest, serviceRoleCode);
			validateInputs();
			CategoryMaker categoryMaker = categoryMakerRepository.getCategoryByCategoryCode(categoryCode);
			if (categoryMaker == null) {
				throw new ValidationException(categoryCode, MessageCodes.NO_APPROVAL_PENDING.getStrValue());
			}
			CategoryChecker categoryChecker = new CategoryChecker();
			BeanUtils.copyProperties(categoryChecker, categoryMaker);
			if (Constants.ACTION.getStrValue().equals(action)) {
				categoryChecker.setStatus(Constants.ACTIVE_STATUS.getStrValue());
				responseMessageCode = MessageCodes.CATEGORY_ADD_APPR_SUCCESS.getStrValue();
				params.add(categoryChecker.getCategoryName());
				categoryCheckerRepository.save(categoryChecker);
				saveSysBearerAndSysControlGroupProcess(categoryApproveRequest.getCategoryDetails());
			} else {
				responseMessageCode = MessageCodes.CATEGORY_REJECT_SUCCESS.getStrValue();
			}
			responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
			categoryMakerRepository.delete(categoryMaker);
			createRequestResponseHistObject();
			constructAdminMap.put(NEW_OBJECT, categoryChecker);
			createAuditLogMap(constructAdminMap);
			kafkaTemplate.send("categoryChecker", categoryChecker);
		} catch (Exception e) {
			handleException(e, params, this.getClass().getSimpleName());
		}
		generateReponseMessage(params);
		return createResponse();
	}

	@Override
	public void validateInputs() {
		if (CommonUtils.isNullorEmpty(categoryCode)) {
			throw new ValidationException(Constants.CATEGORY_CODE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		} else if (!CommonUtils.isAlphaNumericAndLenghtCheck(categoryCode, categoryCode.length(),
				Constants.CATEGORY_CODE_LENGTH.getIntValue())) {
			throw new ValidationException(Constants.CATEGORY_CODE.getStrValue(),
					MessageCodes.FIELD_ALPHANUMERIC.getStrValue());
		}
		if (CommonUtils.isNullorEmpty(action)) {
			throw new ValidationException(Constants.ACTION_CODE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}

		WalletAndBankServiceForCategory walletAndBankServiceForCategory = categoryApproveRequest.getCategoryDetails();
		if (walletAndBankServiceForCategory == null) {
			throw new ValidationException(Constants.CATEGORY_DETAILS.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		walletAndBankServiceCheck(walletAndBankServiceForCategory);
	}

	@Override
	public AddCategoryApproveResponse createResponse() {
		AddCategoryApproveResponse categoryApproveResponse = new AddCategoryApproveResponse();
		categoryApproveResponse.setStatus(responseStatus);
		categoryApproveResponse.setExternalRefId(categoryApproveRequest.getExternalRefId());
		categoryApproveResponse.setReferenceId(referenceId);
		categoryApproveResponse.setMessage(responseMessage);
		return categoryApproveResponse;
	}

	private void saveSysBearerAndSysControlGroupProcess(
			WalletAndBankServiceForCategory walletAndBankServiceForCategory) {
		for (int i = 0; i < walletAndBankServiceForCategory.getPayerWalServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getPayerWalServiceList().get(i),
					Constants.USER_TYPE_PAYER.getStrValue(), Constants.WALLET.getStrValue(), "PRW", i);
		}
		for (int i = 0; i < walletAndBankServiceForCategory.getPayeeWalServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getPayeeWalServiceList().get(i),
					Constants.USER_TYPE_PAYEE.getStrValue(), Constants.WALLET.getStrValue(), "PEW", i);
		}
		for (int i = 0; i < walletAndBankServiceForCategory.getInitiatorWalServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getInitiatorWalServiceList().get(i),
					Constants.INITIATOR.getStrValue(), Constants.WALLET.getStrValue(), "IRW", i);
		}
		for (int i = 0; i < walletAndBankServiceForCategory.getPayerBankServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getPayerBankServiceList().get(i),
					Constants.USER_TYPE_PAYER.getStrValue(), Constants.BANK.getStrValue(), "PRB", i);
		}
		for (int i = 0; i < walletAndBankServiceForCategory.getPayeeBankServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getPayeeBankServiceList().get(i),
					Constants.USER_TYPE_PAYEE.getStrValue(), Constants.BANK.getStrValue(), "PEB", i);
		}
		for (int i = 0; i < walletAndBankServiceForCategory.getInitiatorBankServiceList().size(); i++) {
			saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getPayeeBankServiceList().get(i),
					Constants.INITIATOR.getStrValue(), Constants.BANK.getStrValue(), "IRB", i);
		}
		if (!CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getNonFinancialList())) {
			for (int i = 0; i < walletAndBankServiceForCategory.getNonFinancialList().size(); i++) {
				saveSysBearerAndSysControlGroup(walletAndBankServiceForCategory.getNonFinancialList().get(i),
						Constants.INITIATOR.getStrValue(), null, "I", i);
			}
		}
	}

	private void saveSysBearerAndSysControlGroup(CategoryService catService, String typeId, String paymentMethod,
			String profileBearer, int index) {
		if (catService.getSelected().equals(Constants.YES.getStrValue())) {
			SysServicePymtMap sysServicePymtMap = sysServicePymtMapRepository
					.getSysServicePymtMapById(catService.getServicePymtId());
			if (sysServicePymtMap != null) {
				SysServiceProfileBearer sysBearer = new SysServiceProfileBearer();
				String profileBearerId = catService.getBearerCode() + "_" + catService.getServiceType() + "_"
						+ categoryCode + "_" + profileBearer + index;
				sysBearer.setServPrflBearerId(profileBearerId);
				sysBearer.setBearerId(catService.getBearerCode());
				sysBearer.setServiceType(catService.getServiceType());
				sysBearer.setCategoryCode(categoryCode);
				sysBearer.setCategoryProfileId(categoryCode);
				sysServiceProfileBearerRepository.save(sysBearer);
				Long maxGid = sysControlGroupRepository.getMaxGidValue() + 1;
				SysControlGroup sysControlGroup = new SysControlGroup();
				sysControlGroup.setGroupTypeId(String.valueOf(DbConstants.GROUP_ROLE_TYPE_ID.getStrValue()+maxGid));
				sysControlGroup.setName(sysServicePymtMap.getDescription());
				sysControlGroup.setServicePymtId(sysServicePymtMap.getServicePymtId());
				sysControlGroup.setGroupLevel(2l);
				if (CommonUtils.isNullorEmpty(paymentMethod)) {
					sysControlGroup.setPaymentMethodTypeId(sysServicePymtMap.getInitiatorPaymentInstrument());
				} else {
					sysControlGroup.setPaymentMethodTypeId(paymentMethod);
				}
				sysControlGroup.setTypeId(typeId);
				sysControlGroup.setStatusId(Constants.ACTIVE_STATUS.getStrValue());
				sysControlGroup.setServPrflBearerId(profileBearerId);
				sysControlGroupRepository.save(sysControlGroup);
				CategoryRoles catRoles = new CategoryRoles();
				catRoles.setCategoryCode(categoryCode);
				catRoles.setRoleCode(catService.getServiceType());
				catRoles.setApplicationId("2");
				categoryRolesRepository.save(catRoles);
			}
		}
	}

	private void walletAndBankServiceCheck(WalletAndBankServiceForCategory walletAndBankServiceForCategory) {
		// WALLET
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getPayerWalServiceList())) {
			throw new ValidationException(Constants.PAYER_SELECTION_WALLET_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getPayerWalServiceList()) {
			categoryServiceModelCheck(catService);
		}
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getPayeeWalServiceList())) {
			throw new ValidationException(Constants.PAYEE_SELECTION_WALLET_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getPayeeWalServiceList()) {
			categoryServiceModelCheck(catService);
		}
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getInitiatorWalServiceList())) {
			throw new ValidationException(Constants.INITIATOR_SELECTION_WALLET_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getInitiatorWalServiceList()) {
			categoryServiceModelCheck(catService);
		}
		// BANK
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getPayerBankServiceList())) {
			throw new ValidationException(Constants.PAYER_SELECTION_BANK_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getPayerBankServiceList()) {
			categoryServiceModelCheck(catService);
		}
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getPayeeBankServiceList())) {
			throw new ValidationException(Constants.PAYEE_SELECTION_BANK_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getPayeeBankServiceList()) {
			categoryServiceModelCheck(catService);
		}
		if (CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getInitiatorBankServiceList())) {
			throw new ValidationException(Constants.INITIATOR_SELECTION_BANK_SERVICE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		for (CategoryService catService : walletAndBankServiceForCategory.getInitiatorBankServiceList()) {
			categoryServiceModelCheck(catService);
		}
		if (!CommonUtils.isNullorEmpty(walletAndBankServiceForCategory.getNonFinancialList())) {
			for (CategoryService catService : walletAndBankServiceForCategory.getNonFinancialList()) {
				categoryServiceModelCheck(catService);
			}
		}
	}

	private void categoryServiceModelCheck(CategoryService catService) {
		if (catService.getServicePymtId() == null || CommonUtils.isNullorZero(catService.getServicePymtId())) {
			throw new ValidationException(Constants.SERVICE_PYMT_ID.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		if (CommonUtils.isNullorEmpty(catService.getBearerCode())) {
			throw new ValidationException(Constants.SERVICE_BEARER_CODE.getStrValue(),
					MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		if (CommonUtils.isNullorEmpty(catService.getSelected())) {
			throw new ValidationException(Constants.SELECTED.getStrValue(), MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		if (!CommonUtils.isYesOrNo(catService.getSelected())) {
			throw new ValidationException(Constants.SELECTED.getStrValue(), MessageCodes.FIELD_INVALID.getStrValue());
		}
		if (sysServicePymtMapRepository.getSysServicePymtMapById(catService.getServicePymtId()) == null) {
			throw new ValidationException(Constants.SERVICE_PYMT_ID.getStrValue(),
					MessageCodes.FIELD_INVALID.getStrValue());
		}
	}
}