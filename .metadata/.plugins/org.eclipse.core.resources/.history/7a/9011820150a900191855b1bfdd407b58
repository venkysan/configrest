package com.comviva.mfs.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.comviva.mfs.model.domain.AddDomainApproveRequest;
import com.comviva.mfs.model.domain.AddDomainApproveResponse;
import com.comviva.mfs.model.domain.AddDomainInitiateRequest;
import com.comviva.mfs.model.domain.AddDomainInitiateResponse;
import com.comviva.mfs.model.domain.DeleteDomainApproveRequest;
import com.comviva.mfs.model.domain.DeleteDomainApproveResponse;
import com.comviva.mfs.model.domain.DeleteDomainInitiateRequest;
import com.comviva.mfs.model.domain.DeleteDomainInitiateResponse;
import com.comviva.mfs.model.domain.GetAllDomainDetailsResponse;
import com.comviva.mfs.model.domain.GetDomainDetailsResponse;
import com.comviva.mfs.model.domain.GetDomainsByAppCodeResponse;
import com.comviva.mfs.model.domain.UpdateDomainApproveRequest;
import com.comviva.mfs.model.domain.UpdateDomainApproveResponse;
import com.comviva.mfs.model.domain.UpdateDomainInitiateRequest;
import com.comviva.mfs.model.domain.UpdateDomainInitiateResponse;
import com.comviva.mfs.service.domain.AddDomainApproveService;
import com.comviva.mfs.service.domain.AddDomainInitiateService;
import com.comviva.mfs.service.domain.DeleteDomainApproveService;
import com.comviva.mfs.service.domain.DeleteDomainInitiateService;
import com.comviva.mfs.service.domain.GetAllDomainService;
import com.comviva.mfs.service.domain.GetDomainByCodeService;
import com.comviva.mfs.service.domain.GetDomainsByAppCodeService;
import com.comviva.mfs.service.domain.UpdateDomainApproveService;
import com.comviva.mfs.service.domain.UpdateDomainInitiateService;

import io.micrometer.core.annotation.Timed;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/")
@Api(description = "Operations for Domain Management")
public class DomainController {

	private static final Logger LOGGER = LoggerFactory.getLogger(DomainController.class);
	private AddDomainInitiateService domainInitiateService;
	private AddDomainApproveService domainApproveService;
	private DeleteDomainInitiateService deleteDomainInitiateService;
	private DeleteDomainApproveService deleteDomainApproveService;
	private UpdateDomainInitiateService updateDomainInitiateService;
	private UpdateDomainApproveService updateDomainApproveService;
	@Autowired
	private GetDomainByCodeService singleDomainDetails;
	@Autowired
	private GetAllDomainService getAllDomainDetails;
	@Autowired
	private GetDomainsByAppCodeService getDomainsByAppCodeService;

	@Autowired
	public DomainController(AddDomainInitiateService domainInitiateService,
			AddDomainApproveService domainApproveService,
			DeleteDomainInitiateService deleteDomainInitiateService,
			DeleteDomainApproveService deleteDomainApproveService,
			UpdateDomainInitiateService updateDomainInitiateService,
			UpdateDomainApproveService updateDomainApproveService) {
		this.domainInitiateService = domainInitiateService;
		this.domainApproveService = domainApproveService;
		this.deleteDomainInitiateService = deleteDomainInitiateService;
		this.deleteDomainApproveService = deleteDomainApproveService;
		this.updateDomainInitiateService = updateDomainInitiateService;
		this.updateDomainApproveService = updateDomainApproveService;
	}

	@GetMapping(value = "/v1/domains", produces = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Returns list of domain in the system", response = GetAllDomainDetailsResponse.class)
	@Timed(value = "fetchAllDomain.request", histogram = true, percentiles = { 0.95, 0.99 }, extraTags = { "version",
			"v1" })
	public GetAllDomainDetailsResponse getAllDomains(@RequestParam("identifierType") String identifierType,
			@RequestParam("identifierValue") String identifierValue, @RequestParam("bearerCode") String bearerCode,
			@RequestParam("initiatedType") String initiateStatus) {
		LOGGER.info("Get All Domain Details Request");
		GetAllDomainDetailsResponse getAllDomainDetailsResponse = getAllDomainDetails.execute(identifierType,
				identifierValue, bearerCode, initiateStatus);
		LOGGER.info("Get All Domain Details Request: {}", getAllDomainDetailsResponse);
		return getAllDomainDetailsResponse;
	}

	@GetMapping(value = "v1/domains/{domainCode}", produces = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Returns details of a domain based on specific Domain Code", response = GetDomainDetailsResponse.class)
	@Timed(value = "SingleDomainDetail.request", histogram = true, percentiles = { 0.95, 0.99 }, extraTags = {
			"version", "v1" })
	public GetDomainDetailsResponse getDomainDetails(@PathVariable("domainCode") String domainCode,
			@RequestParam("identifierType") String identifierType,
			@RequestParam("identifierValue") String identifierValue, @RequestParam("bearerCode") String bearerCode,
			@RequestParam("initiatedType") String initiateStatus) {
		if (LOGGER.isInfoEnabled()) {
			LOGGER.info("Single Domain Details request: {}", domainCode);
		}
		GetDomainDetailsResponse getDomainDetailsResponse = singleDomainDetails.execute(domainCode, identifierType,
				identifierValue, bearerCode, initiateStatus);
		LOGGER.info("Single Domain Details response: {}", getDomainDetailsResponse);
		return getDomainDetailsResponse;
	}
	
	@GetMapping(value = "v1/domains/application/{applicationCode}", produces = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Returns list of domain based on specific application code", response = GetDomainsByAppCodeResponse.class)
	@Timed(value = "GetDomainsByAppCode.request", histogram = true, percentiles = { 0.95, 0.99 }, extraTags = {
			"version", "v1" })
	public GetDomainsByAppCodeResponse getDomainsByAppCode(@PathVariable String applicationCode,
			@RequestParam("identifierType") String identifierType,
			@RequestParam("identifierValue") String identifierValue, @RequestParam("bearerCode") String bearerCode,
			@RequestParam("initiateStatus") String initiateStatus) {
		LOGGER.info("Get Domains By Application Code request: {}", applicationCode);
		GetDomainsByAppCodeResponse getDomainsByAppCodeResponse = getDomainsByAppCodeService.execute(applicationCode,
				identifierType, identifierValue, bearerCode, initiateStatus);
		LOGGER.info("Get Domains By Application Code response: {}", getDomainsByAppCodeResponse);
		return getDomainsByAppCodeResponse;
	}

	@PostMapping(value = "v1/domains/", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Add Initiate Domain", response = AddDomainInitiateResponse.class)
	@Timed(value = "AddDomainInit.request", histogram = true, percentiles = { 0.95, 0.99 }, extraTags = { "version",
			"v1" })
	public AddDomainInitiateResponse addDomainInitiation(
			@RequestBody AddDomainInitiateRequest addDomainInitiateRequest) {
		LOGGER.info("Add Initiate Domain request: {}", addDomainInitiateRequest);
		AddDomainInitiateResponse addDomainInitiateResponse = domainInitiateService.execute(addDomainInitiateRequest);
		LOGGER.info("Add Initiate Domain response: {} ", addDomainInitiateResponse);
		return addDomainInitiateResponse;
	}

	@PostMapping(value = "v1/domains/{domainCode}/{action}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Add Approve Domain", response = AddDomainApproveResponse.class)
	@Timed(value = "AddDomainAppr.request", histogram = true, percentiles = { 0.95, 0.99 }, extraTags = { "version",
			"v1" })
	public AddDomainApproveResponse addDomainApproval(@PathVariable("domainCode") String domainCode,
			@PathVariable("action") String action, @RequestBody AddDomainApproveRequest addApproveDomainRequest) {
		LOGGER.info("Add Approve Domain request: {}", addApproveDomainRequest);
		AddDomainApproveResponse addDomainApproveResponse = domainApproveService.execute(domainCode, action,
				addApproveDomainRequest);
		LOGGER.info("Add Approve Domain response: {}", addDomainApproveResponse);
		return addDomainApproveResponse;
	}

	@PutMapping(value = "v1/domains/{domainCode}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Update Initiate Domain", response = UpdateDomainInitiateResponse.class)
	@Timed(value = "UpdateDomainInit.request", histogram = true, percentiles = { 0.95, 0.99 }, extraTags = { "version",
			"v1" })
	public UpdateDomainInitiateResponse updateDomainInitiation(@PathVariable("domainCode") String domainCode,
			@RequestBody UpdateDomainInitiateRequest updateDomainInitiateRequest) {
		LOGGER.info("Update Initiate Domain request: {}", updateDomainInitiateRequest);
		UpdateDomainInitiateResponse updateDomainInitiateResponse = updateDomainInitiateService.execute(domainCode,
				updateDomainInitiateRequest);
		LOGGER.info("Update Initiate Domain response: {}", updateDomainInitiateResponse);
		return updateDomainInitiateResponse;
	}

	@PutMapping(value = "v1/domains/{domainCode}/{action}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Update Approve Domain", response = UpdateDomainApproveResponse.class)
	@Timed(value = "UpdateDomainAppr.request", histogram = true, percentiles = { 0.95, 0.99 }, extraTags = { "version",
			"v1" })
	public UpdateDomainApproveResponse updateDomainApproval(@PathVariable("domainCode") String domainCode,
			@PathVariable String action, @RequestBody UpdateDomainApproveRequest updateDomainApproveRequest) {
		LOGGER.info("Update Approve Domain request: {}", updateDomainApproveRequest);
		UpdateDomainApproveResponse updateDomainApproveResponse = updateDomainApproveService.execute(domainCode, action,
				updateDomainApproveRequest);
		LOGGER.info("Update Approve Domain response: {}", updateDomainApproveResponse);
		return updateDomainApproveResponse;
	}

	@DeleteMapping(value = "v1/domains/{domainCode}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Delete Initiate Domain", response = DeleteDomainInitiateResponse.class)
	@Timed(value = "DeleteDomainInit.request", histogram = true, percentiles = { 0.95, 0.99 }, extraTags = { "version",
			"v1" })
	public DeleteDomainInitiateResponse deleteDoaminInitiation(@PathVariable("domainCode") String domainCode,
			@RequestBody DeleteDomainInitiateRequest deleteDomainInitiateRequest) {
		LOGGER.info("Delete Initiate Domain request: {}", deleteDomainInitiateRequest);
		DeleteDomainInitiateResponse deleteDomainInitiateResponse = deleteDomainInitiateService.execute(domainCode,
				deleteDomainInitiateRequest);
		LOGGER.info("Delete Initiate Domain response: {}", deleteDomainInitiateResponse);
		return deleteDomainInitiateResponse;
	}

	@DeleteMapping(value = "v1/domains/{domainCode}/{action}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Delete Approve Domain", response = DeleteDomainApproveResponse.class)
	@Timed(value = "DeleteDomainAppr.request", histogram = true, percentiles = { 0.95, 0.99 }, extraTags = { "version",
			"v1" })
	public DeleteDomainApproveResponse deleteDomainApproval(@PathVariable("domainCode") String domainCode,
			@PathVariable("action") String action, @RequestBody DeleteDomainApproveRequest deleteDomainApproveRequest) {
		LOGGER.info("Delete Approve Domain request: {}", deleteDomainApproveRequest);
		DeleteDomainApproveResponse deleteDomainApproveResponse = deleteDomainApproveService.execute(domainCode, action,
				deleteDomainApproveRequest);
		LOGGER.info("Delete Approve Domain response: {}", deleteDomainApproveResponse);
		return deleteDomainApproveResponse;
	}

}