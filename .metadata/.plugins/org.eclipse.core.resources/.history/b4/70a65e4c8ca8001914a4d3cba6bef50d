package com.comviva.mfs.service.category;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.entity.CategoryMaker;
import com.comviva.mfs.model.category.DeleteCategoryApproveRequest;
import com.comviva.mfs.model.category.DeleteCategoryApproveResponse;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.CategoryMakerRepository;
import com.comviva.mfs.service.CommonService;

@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class DeleteCategoryApproveService extends CommonService {

	private CategoryCheckerRepository categoryCheckerRepository;
	private CategoryMakerRepository categoryMakerRepository;
	private DeleteCategoryApproveRequest deleteCategoryApproveRequest;
	private String categoryCode;
	private String action;

	@Autowired
	private KafkaTemplate<String, Object> kafkaTemplate;

	@Autowired
	public DeleteCategoryApproveService(CategoryCheckerRepository categoryCheckerRepository,
			CategoryMakerRepository categoryMakerRepository) {
		this.categoryCheckerRepository = categoryCheckerRepository;
		this.categoryMakerRepository = categoryMakerRepository;
	}

	public DeleteCategoryApproveResponse execute(String categoryCode, String action,
			DeleteCategoryApproveRequest deleteApproveCategoryRequest) {
		Map<String, Object> constructAdminMap = new HashMap<>();
		List<String> params = new ArrayList<>();
		try {
			this.deleteCategoryApproveRequest = deleteApproveCategoryRequest;
			this.categoryCode = categoryCode;
			this.action = action;
			validateInputs();
			serviceRoleCode = ServiceRoleCodes.DELETE_CATEGORY_APPR_ROLE.getStrValue();
			super.initiate(deleteApproveCategoryRequest, serviceRoleCode);

			CategoryMaker categoryMaker = categoryMakerRepository.getCategoryByCategoryCode(categoryCode);
			if (categoryMaker == null) {
				throw new ValidationException(categoryCode, MessageCodes.NO_APPROVAL_PENDING.getStrValue());
			}
			CategoryChecker categoryChecker = new CategoryChecker();
			BeanUtils.copyProperties(categoryChecker, categoryMaker);
			if (Constants.ACTION.getStrValue().equals(action)) {
				categoryChecker.setStatus(Constants.INACTIVE_STATUS.getStrValue());
				responseMessageCode = MessageCodes.CATEGORY_DELETE_APPR_SUCCESS.getStrValue();
				params.add(categoryChecker.getCategoryName());
				categoryCheckerRepository.save(categoryChecker);
			} else {
				responseMessageCode = MessageCodes.CATEGORY_REJECT_SUCCESS.getStrValue();
			}
			categoryMakerRepository.delete(categoryMaker);
			responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
			constructAdminMap.put(NEW_OBJECT, categoryChecker);
			constructAdminMap.put(OLD_OBJECT, categoryChecker);
			createAuditLogMap(constructAdminMap);
			kafkaTemplate.send("categoryChecker", categoryChecker);
		} catch (Exception e) {
			handleException(e, params, this.getClass().getSimpleName());
		}
		generateReponseMessage(params);
		return createResponse();
	}

	@Override
	public void validateInputs() {
		if (CommonUtils.isNullorEmpty(categoryCode)) {
			throw new ValidationException("Category Code", MessageCodes.FIELD_MANDATORY.getStrValue());
		}
		if (CommonUtils.isNullorEmpty(action)) {
			throw new ValidationException("Action ", MessageCodes.FIELD_MANDATORY.getStrValue());
		}
	}

	@Override
	public DeleteCategoryApproveResponse createResponse() {
		DeleteCategoryApproveResponse deleteCategoryApproveResponse = new DeleteCategoryApproveResponse();
		deleteCategoryApproveResponse.setStatus(responseStatus);
		deleteCategoryApproveResponse.setExternalRefId(deleteCategoryApproveRequest.getExternalRefId());
		deleteCategoryApproveResponse.setReferenceId(referenceId);
		deleteCategoryApproveResponse.setMessage(responseMessage);
		return deleteCategoryApproveResponse;
	}
}