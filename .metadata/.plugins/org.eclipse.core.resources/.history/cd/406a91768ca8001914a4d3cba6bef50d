package com.comviva.mfs.service.category;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.comviva.mfs.common.Constants;
import com.comviva.mfs.common.MessageCodes;
import com.comviva.mfs.common.ServiceRoleCodes;
import com.comviva.mfs.common.ValidationException;
import com.comviva.mfs.common.utils.CommonUtils;
import com.comviva.mfs.entity.CategoryChecker;
import com.comviva.mfs.entity.CategoryMaker;
import com.comviva.mfs.model.category.DeleteCategoryInitiateRequest;
import com.comviva.mfs.model.category.DeleteCategoryInitiateResponse;
import com.comviva.mfs.repository.CategoryCheckerRepository;
import com.comviva.mfs.repository.CategoryMakerRepository;
import com.comviva.mfs.service.CommonService;

@Service
@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class DeleteCategoryInitiateService extends CommonService {

	private String categoryCode;
	private CategoryChecker categoryChecker;
	private CategoryCheckerRepository categoryCheckerRepository;
	private CategoryMakerRepository categoryMakerRepository;
	private DeleteCategoryInitiateRequest deleteCategoryInitiateRequest;

	@Autowired
	private KafkaTemplate<String, Object> kafkaTemplate;

	@Autowired
	public DeleteCategoryInitiateService(CategoryCheckerRepository categoryCheckerRepository,
			CategoryMakerRepository categoryMakerRepository) {
		this.categoryCheckerRepository = categoryCheckerRepository;
		this.categoryMakerRepository = categoryMakerRepository;
	}

	public DeleteCategoryInitiateResponse execute(String categoryCode,
			DeleteCategoryInitiateRequest deleteCategoryInitiateRequest) {
		Map<String, Object> constructAdminMap = new HashMap<>();
		List<String> params = new ArrayList<>();
		String isApprovalRequired;
		try {
			this.categoryCode = categoryCode;
			this.deleteCategoryInitiateRequest = deleteCategoryInitiateRequest;
			serviceRoleCode = ServiceRoleCodes.DELETE_CATEGORY_INIT_ROLE.getStrValue();
			super.initiate(deleteCategoryInitiateRequest, serviceRoleCode);
			validateInputs();
			isApprovalRequired = deleteCategoryInitiateRequest.getIsApprovalRequired();
			if (null != isApprovalRequired && Constants.ACTIVE_STATUS.getStrValue().equals(isApprovalRequired)) {
				CategoryMaker categoryMaker = new CategoryMaker();
				BeanUtils.copyProperties(categoryMaker, categoryChecker);
				categoryMaker.setStatus(Constants.DELETE_INITIATE_STATUS.getStrValue());
				categoryMakerRepository.save(categoryMaker);
				constructAdminMap.put(NEW_OBJECT, categoryMaker);
				constructAdminMap.put(OLD_OBJECT, categoryChecker);
				params.add(categoryMaker.getCategoryName());
				responseMessageCode = MessageCodes.CATEGORY_DELETE_INIT_SUCCESS.getStrValue();
			} else {
				constructAdminMap.put(OLD_OBJECT, categoryChecker);
				categoryChecker.setStatus(Constants.INACTIVE_STATUS.getStrValue());
				categoryCheckerRepository.save(categoryChecker);
				constructAdminMap.put(NEW_OBJECT, categoryChecker);
				params.add(categoryChecker.getCategoryName());
				responseMessageCode = MessageCodes.CATEGORY_DELETE_APPR_SUCCESS.getStrValue();
				kafkaTemplate.send("categoryChecker", categoryChecker);
			}
			responseStatus = Constants.SUCCESS_RESPONSE.getStrValue();
			createRequestResponseHistObject();
			createAuditLogMap(constructAdminMap);
		} catch (Exception e) {
			handleException(e, params, this.getClass().getSimpleName());
		}
		generateReponseMessage(params);
		return createResponse();

	}

	

	@Override
	public DeleteCategoryInitiateResponse createResponse() {
		DeleteCategoryInitiateResponse deleteInitiateCategoryResponse = new DeleteCategoryInitiateResponse();
		deleteInitiateCategoryResponse.setStatus(responseStatus);
		deleteInitiateCategoryResponse.setExternalRefId(deleteCategoryInitiateRequest.getExternalRefId());
		deleteInitiateCategoryResponse.setReferenceId(referenceId);
		deleteInitiateCategoryResponse.setMessage(responseMessage);
		return deleteInitiateCategoryResponse;
	}
}